{"meta":{"title":"HelloWorld","subtitle":"","description":"HelloWorldZTR is a Developer & PC Enthusiast in Shandong, China, loves coding and all kinds of things about computers.","author":"HelloWorldZTR","url":"http://hiztr.cn","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-04-07T02:32:24.000Z","updated":"2020-04-07T02:32:24.953Z","comments":false,"path":"/404.html","permalink":"http://hiztr.cn/404.html","excerpt":"","text":""},{"title":"About","date":"2020-04-04T13:34:33.000Z","updated":"2020-04-08T00:49:05.153Z","comments":false,"path":"about/index.html","permalink":"http://hiztr.cn/about/index.html","excerpt":"","text":"IntroductionI am currently a student from China. I personally enjoy programming and PC building, etc. However, due to my schoolwork, I probably have little time to write this blog and have to translate some articles in Chinese. If I posted a blog that is translated from Chinese, I will paste a link at the top of the article. Something about this websiteAs I cannot get a license for the website ( I am a student QAQ ), this blog is hosted on Github now using GitPage. The blog theme is written by cofess, which you can see on the bottom left of the page. Great thanks to cofess. XD I don’t know why I am gonna write this in English. Perhaps it’s a decent way to practice English? IDK. I’ll post my Chinese articles on CSDN, and English ones here."},{"title":"Minecraft 像素画转换器","date":"2020-05-23T03:03:49.000Z","updated":"2020-06-03T13:33:23.970Z","comments":false,"path":"mc/index.html","permalink":"http://hiztr.cn/mc/index.html","excerpt":"一个用来快速将图片转换为我的世界像素画的工具","text":"一个用来快速将图片转换为我的世界像素画的工具 .container { margin-top: 20px; } .image-preview-input { position: relative; overflow: hidden; margin: 0px; color: #333; background-color: #fff; border-color: #ccc; } .image-preview-input input[type=file] { position: absolute; top: 0; right: 0; margin: 0; padding: 0; font-size: 20px; cursor: pointer; opacity: 0; filter: alpha(opacity=0); } .image-preview-input-title { margin-left: 2px; } div #result { overflow-x: scroll; white-space: nowrap; line-height: 16px; scale: 0.5; } canvas { width: 100%; image-rendering: pixelated; } .hw { width: -webkit-fill-available; } .result-box { padding-top: 20px; overflow: hidden; } /** * [thresholdConvert 阈值处理] * @param {[type]} ctx [description] * @param {[type]} imageData [description] * @param {[type]} threshold [阈值] * @param {[type]} mode [模式：0：彩色，1：黑白] * @return {[type]} [description] */ function thresholdConvert(ctx, imageData, threshold, mode) { var data = imageData.data; for (var i = 0; i < data.length; i += 4) { var red = data[i]; var green = data[i + 1]; var blue = data[i + 2]; var alpha = data[i + 3]; // 灰度计算公式 var gray = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]; var color = gray >= threshold ? 255 : 0; data[i] = (mode == 0 && color == 0) ? red : color; // red data[i + 1] = (mode == 0 && color == 0) ? green : color; // green data[i + 2] = (mode == 0 && color == 0) ? blue : color; // blue data[i + 3] = alpha >= threshold ? 255 : 0; // 去掉透明 } ctx.putImageData(imageData, 0, 0); }; // 魔法® function getPixel(imgData, index) { var i = index * 4, d = imgData.data; return [d[i], d[i + 1], d[i + 2], d[i + 3]] // [R,G,B,A] } function getPixelXY(imgData, x, y) { return getPixel(imgData, y * imgData.width + x); } function Block(name, id, src, rgb) { this.name = name; this.id = id; this.src = src; this.rgb = rgb; // this.getName = function () { return this.name; } // this.getId = function () { return this.id; } // this.getSrc = function () { return this.src; } // this.getRGB = function () { return this.rgb; } // this.getImage = function () { // return new Image().src = this.src; // } } $(document).on('click', '#close-preview', function () { $('.image-preview').popover('hide'); // Hover befor close the preview $('.image-preview').hover( function () { $('.image-preview').popover('show'); }, function () { $('.image-preview').popover('hide'); } ); }); var width; //现在的宽度 var height; //现在的高度 var cvs; //预览canvas var ctx; //cvs的content var idt; //content的imagedata var img; //原始Image //方块字典 var blocks = new Array( new Block('黑色羊毛', 0, 'https://i.loli.net/2020/05/23/LfWvgJ4QB6jixDX.png', new Array(20, 21, 25)), new Block('蓝色羊毛', 1, 'https://i.loli.net/2020/05/23/vKYTm3zPfOLZS6M.png', new Array(53, 57, 157)), new Block('棕色羊毛', 2, 'https://i.loli.net/2020/05/23/Zt8b2ikBEFHlarV.png', new Array(113, 71, 40)), new Block('青色羊毛', 3, 'https://i.loli.net/2020/05/23/Y8qQbOtZIe5Rp2l.png', new Array(21, 136, 144)), new Block('灰色羊毛', 4, 'https://i.loli.net/2020/05/23/Md9TVqx3ybUgEKf.png', new Array(63, 68, 71)), new Block('绿色羊毛', 5, 'https://i.loli.net/2020/05/23/OYzkALha98VdgSW.png', new Array(84, 109, 27)), new Block('淡蓝色羊毛', 6, 'https://i.loli.net/2020/05/23/WnIYFBsGj138xai.png', new Array(58, 175, 218)), new Block('淡灰色羊毛', 7, 'https://i.loli.net/2020/05/23/715JZIlmOd6boNM.png', new Array(142, 143, 135)), new Block('黄绿色羊毛', 8, 'https://i.loli.net/2020/05/23/uGvEfnO3KBSsgHT.png', new Array(111, 184, 25)), new Block('洋红色羊毛', 9, 'https://i.loli.net/2020/05/23/dNPcp2SWwAUQH1R.png', new Array(190, 69, 180)), new Block('橙色羊毛', 10, 'https://i.loli.net/2020/05/23/L7P2aZ9hkj4Qcox.png', new Array(241, 119, 20)), new Block('粉色羊毛', 11, 'https://i.loli.net/2020/05/23/qDiNEI1Jhv6YBgC.png', new Array(238, 141, 171)), new Block('紫色羊毛', 12, 'https://i.loli.net/2020/05/23/4L5MKaTnBRFYywf.png', new Array(119, 40, 170)), new Block('红色羊毛', 13, 'https://i.loli.net/2020/05/23/lwVCI5R8ZPHzqxt.png', new Array(160, 39, 34)), new Block('白色羊毛', 14, 'https://i.loli.net/2020/05/23/4dr5iqu36aZGbsy.png', new Array(255, 255, 255)), new Block('黄色羊毛', 15, 'https://i.loli.net/2020/05/23/alwkYHR4z2oLWuJ.png', new Array(248, 196, 39)), new Block('黑色混凝土', 16, 'https://i.loli.net/2020/05/30/dkTE5j7XK12e6BW.png'), new Block('蓝色混凝土', 17, 'https://i.loli.net/2020/05/30/i6oCbhxFtZ5uYMG.png'), new Block('棕色混凝土', 18, 'https://i.loli.net/2020/05/30/bIkgBhsDm7H59Ki.png'), new Block('青色混凝土', 19, 'https://i.loli.net/2020/05/30/NmJgeraxcMjCsdv.png'), new Block('灰色混凝土', 20, 'https://i.loli.net/2020/05/30/X64QmlJUj8IxFih.png'), new Block('绿色混凝土', 21, 'https://i.loli.net/2020/05/30/EZj9f4wdy2thJMb.png'), new Block('淡蓝色混凝土', 22, 'https://i.loli.net/2020/05/30/t63FpKxHUW49fdD.png'), new Block('淡灰色混凝土', 23, 'https://i.loli.net/2020/05/30/8IHWJTtYa1LE6Uj.png'), new Block('黄绿色混凝土', 24, 'https://i.loli.net/2020/05/30/azMRBl1K7GIjrY4.png'), new Block('洋红色混凝土', 25, 'https://i.loli.net/2020/05/30/oui3CJFpRlG1BUc.png'), new Block('橙色混凝土', 26, 'https://i.loli.net/2020/05/30/fYswW4eZc9Xirmk.png'), new Block('粉色混凝土', 27, 'https://i.loli.net/2020/05/30/G9SMjXurCAvHYzI.png'), new Block('紫色混凝土', 28, 'https://i.loli.net/2020/05/30/oVlsuYIB7CardDA.png'), new Block('红色混凝土', 29, 'https://i.loli.net/2020/05/30/nHO1NVAk7iPRw5M.png'), new Block('白色混凝土', 30, 'https://i.loli.net/2020/05/30/8OXl5i9Z2C6QVYc.png'), new Block('黄色混凝土', 31, 'https://i.loli.net/2020/05/30/1yNip7bK65ZmL9z.png'), new Block('注意⚠️混凝土暂时不能使用', 32, ''), new Block('', 33, '') ) var blocks2 = new Array( new Block('黑色羊毛', 0, 'https://i.loli.net/2020/05/23/LfWvgJ4QB6jixDX.png', new Array(20, 21, 25)), new Block('蓝色羊毛', 1, 'https://i.loli.net/2020/05/23/vKYTm3zPfOLZS6M.png', new Array(53, 57, 157)), new Block('棕色羊毛', 2, 'https://i.loli.net/2020/05/23/Zt8b2ikBEFHlarV.png', new Array(113, 71, 40)), new Block('青色羊毛', 3, 'https://i.loli.net/2020/05/23/Y8qQbOtZIe5Rp2l.png', new Array(21, 136, 144)), new Block('灰色羊毛', 4, 'https://i.loli.net/2020/05/23/Md9TVqx3ybUgEKf.png', new Array(63, 68, 71)), new Block('绿色羊毛', 5, 'https://i.loli.net/2020/05/23/OYzkALha98VdgSW.png', new Array(84, 109, 27)), new Block('淡蓝色羊毛', 6, 'https://i.loli.net/2020/05/23/WnIYFBsGj138xai.png', new Array(58, 175, 218)), new Block('淡灰色羊毛', 7, 'https://i.loli.net/2020/05/23/715JZIlmOd6boNM.png', new Array(142, 143, 135)), new Block('黄绿色羊毛', 8, 'https://i.loli.net/2020/05/23/uGvEfnO3KBSsgHT.png', new Array(111, 184, 25)), new Block('洋红色羊毛', 9, 'https://i.loli.net/2020/05/23/dNPcp2SWwAUQH1R.png', new Array(190, 69, 180)), new Block('橙色羊毛', 10, 'https://i.loli.net/2020/05/23/L7P2aZ9hkj4Qcox.png', new Array(241, 119, 20)), new Block('粉色羊毛', 11, 'https://i.loli.net/2020/05/23/qDiNEI1Jhv6YBgC.png', new Array(238, 141, 171)), new Block('紫色羊毛', 12, 'https://i.loli.net/2020/05/23/4L5MKaTnBRFYywf.png', new Array(119, 40, 170)), new Block('红色羊毛', 13, 'https://i.loli.net/2020/05/23/lwVCI5R8ZPHzqxt.png', new Array(160, 39, 34)), new Block('白色羊毛', 14, 'https://i.loli.net/2020/05/23/4dr5iqu36aZGbsy.png', new Array(255, 255, 255)), new Block('黄色羊毛', 15, 'https://i.loli.net/2020/05/23/alwkYHR4z2oLWuJ.png', new Array(248, 196, 39)), //TODO:: ADD more blocks new Block('黄绿色染色玻璃', 16, 'https://i.loli.net/2020/05/24/pnlw4P6ECS8YsR7.png', new Array(127, 204, 25)) ) $(function () { //添加所有方块 //羊毛 var woolTable = document.getElementById('woolTable'); for (var i = 0; i < blocks.length; i++) { var item = blocks[i]; var row = document.createElement('tr'); var cell0 = document.createElement('td'); cell0.innerHTML = ''; var cell1 = document.createElement('td'); cell1.innerHTML = item.id; var cell2 = document.createElement('td'); cell2.innerHTML = item.name; var cell3 = document.createElement('td'); var image = new Image(); image.src = item.src; cell3.appendChild(image); row.appendChild(cell0); row.appendChild(cell1); row.appendChild(cell2); row.appendChild(cell3); woolTable.appendChild(row); } $('#woolModalWool').prop('checked', true); $('#woolTable').find('tr').each(function () { var row = this; // for (var i = 0; i = 0 && id"},{"title":"Categories","date":"2020-04-07T01:25:48.175Z","updated":"2020-04-07T01:25:48.175Z","comments":false,"path":"categories/index.html","permalink":"http://hiztr.cn/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2020-04-07T01:25:55.290Z","updated":"2020-04-07T01:25:55.290Z","comments":false,"path":"tags/index.html","permalink":"http://hiztr.cn/tags/index.html","excerpt":"","text":""},{"title":"工具箱","date":"2020-05-23T09:03:13.000Z","updated":"2020-05-24T04:44:45.713Z","comments":false,"path":"tools/index.html","permalink":"http://hiztr.cn/tools/index.html","excerpt":"","text":"Minecraft 像素画生成器 像素计算器"},{"title":"像素计算器","date":"2020-05-23T09:11:35.000Z","updated":"2020-05-30T06:10:40.306Z","comments":true,"path":"pixelcalc/index.html","permalink":"http://hiztr.cn/pixelcalc/index.html","excerpt":"用于计算整个图片的像素平均值","text":"用于计算整个图片的像素平均值 .container { margin-top: 20px; } .image-preview-input { position: relative; overflow: hidden; margin: 0px; color: #333; background-color: #fff; border-color: #ccc; } .image-preview-input input[type=file] { position: absolute; top: 0; right: 0; margin: 0; padding: 0; font-size: 20px; cursor: pointer; opacity: 0; filter: alpha(opacity=0); } .image-preview-input-title { margin-left: 2px; } div #result { overflow-x: scroll; white-space: nowrap; line-height: 16px; } // 魔法® function getPixel(imgData, index) { var i = index * 4, d = imgData.data; return [d[i], d[i + 1], d[i + 2], d[i + 3]] // [R,G,B,A] } function getPixelXY(imgData, x, y) { return getPixel(imgData, y * imgData.width + x); } function Wool(name, id, src, rgb) { this.name = name; this.id = id; this.src = src; this.rgb = rgb; this.getName = function () { return this.name; } this.getId = function () { return this.id; } this.getSrc = function () { return this.src; } this.getRGB = function () { return this.rgb; } this.getImage = function () { return new Image().src = this.src; } } $(document).on('click', '#close-preview', function () { $('.image-preview').popover('hide'); // Hover befor close the preview $('.image-preview').hover( function () { $('.image-preview').popover('show'); }, function () { $('.image-preview').popover('hide'); } ); }); var width; var height; var cvs; var ctx; var idt; var img; $(function () { // Clear event $('.image-preview-clear').click(function () { $('.image-preview').attr(\"data-content\", \"\").popover('hide'); $('.image-preview-filename').val(\"\"); $('.image-preview-clear').hide(); $('.image-preview-input input:file').val(\"\"); $(\".image-preview-input-title\").text(\"Browse\"); }); // Create the preview image $(\".image-preview-input input:file\").change(function () { img = $('img#preview')[0]; var file = this.files[0]; var reader = new FileReader(); // Set preview image into the popover data-content reader.onload = function (e) { $(\".image-preview-input-title\").text(\"Change\"); $(\".image-preview-clear\").show(); $(\".image-preview-filename\").val(file.name); // img.attr('src', e.target.result); img.src = e.target.result; // $(\".image-preview\").attr(\"data-content\", $(img)[0].outerHTML).popover(\"show\"); } reader.readAsDataURL(file); img.onload = function (e) { width = img.width; height = img.height; cvs = document.createElement('canvas'); cvs.height = height; cvs.width = width; ctx = cvs.getContext('2d'); ctx.drawImage(img, 0, 0, width, height); idt = ctx.getImageData(0, 0, width, height); // var pixek = getPixel(idt, 852); // var pixel = getPixelXY(idt, 1, 1); // console.log(pixel); //Init paramiters var avg = new Array(0,0,0,0,0); for (var y = 0; y < height; y++) { for (var x = 0; x < width; x++) { var pixel = getPixelXY(idt, x, y); for (var i = 0; i < pixel.length; i++) { avg[i] += pixel[i]; } } } for (var i = 0; i < avg.length; i++) { avg[i] /= width * height; avg[i] = Math.floor(avg[i]); } document.getElementById('res').innerHTML = \"new Array(\" + avg[0] + \",\" + avg[1] + \",\" + avg[2] + \")\"; // TODO::PROCCESS IMAGE // doImage(); } }); }); 请选择图片 Clear Browse"}],"posts":[{"title":"个人博客搭建指南-静态网站托管","slug":"Static-website-build-insturction","date":"2020-06-01T11:42:16.000Z","updated":"2020-06-05T11:33:30.813Z","comments":true,"path":"2020/06/01/Static-website-build-insturction/","link":"","permalink":"http://hiztr.cn/2020/06/01/Static-website-build-insturction/","excerpt":"腾讯云出了新的静态网站托管啦，我准备尝试用它来建立一个静态博客","text":"腾讯云出了新的静态网站托管啦，我准备尝试用它来建立一个静态博客 长文请配合目录食用，左下角有个⚓️图标，点击可展开目录 大好消息，腾讯云的静态网站托管上线啦 https://console.cloud.tencent.com/tcb/hosting 也就是说，现在在国内终于有了比 GitPage 更好的解决方案了。主要表现如下： 网速更快（物理上更近啊） 按理说百度可以收录了 还有免费套餐(大约每月10k访问量) 总而言之，真香 注册腾讯云账号这就…不用说了吧，顺带实名认证下方便将来买域名什么的 打开静态网站托管在产品里搜索 创建一个云开发环境一开始他会提示你新建云环境，点击 一定要选择按量计费和免费资源（不然欠费别怪我） 配置静态网站托管得先等云环境初始化好了，刷新一下，点击确定就好啦 依然是慢的要死 进来是这样的界面 配置 hexo 博客这个和之前的差不多，折叠起来放在下面 PS: 如果你已经装好了请直接跳到建立本地环境一节 安装 node.js 并配置打开官网,无脑下载。 终端执行如下命令，无输出。（切换镜像源，不然卡死你） 1npm config set registry https://registry.npm.taobao.org 安装 hexo先建好一个空的文件夹，cd 到上一层目录，执行：(注意，windows powershell 会鬼畜，cmd就好) 12npm install -g hexo-clihexo init 你的文件夹名字 启动，关闭 hexo1hexo s 打开浏览器localhost:4000就能看到了按Ctrl + c退出 安装一大堆插件123456npm install hexo-wordcount --savenpm install hexo-generator-json-content --savenpm install hexo-generator-feed --savenpm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --savenpm install hexo-deployer-git --save 安装主题如果你要用 Gitpage，记得不要用太多图片的主题，会很卡 1git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 是cofess的主题，很简洁 配置有两个文件，themes/pure/_config.yml和_config.yml，优先修改第一个 1theme: pure 重新生成一下，不然不会生效 1hexo clean &amp;&amp; hexo g 另外，还要修改诸如作者名、网址、网站名、评论插件等，各个主题皆有不同，请参考 readme 和百度一般会有注释 写文章，发表写文章12hexo new post \"文章名称\" #新建文章hexo new page \"页面名称\" #新建页面 他会输出一个地址，你打开它就可以编辑了(紫色显示) 文章格式12345678910111213---title: 标题date: 时间 xxxx-xx-xx xx:xx:xxcategories:- #分类，只有一个tags:- #标签，可有多个toc: true #是否显示目录desciption: \"简介，在搜索时可以看到，不要太长\"---文章简介，可以在主页看到&lt;!-- more --&gt;正文 友链、分类、标签页面的开启 不方便说明，百度或看 readme 发表(注意差别⚠️)12$ hexo clean &amp;&amp; hexo g$ tcb hosting:deploy public -e 你的envid #跟刚才一样 部署 cloud base安装 Tencent cli注意哈，要先装 node.js 1$ sudo npm install -g @cloudbase/cli 1$ tcb -h #应该有输出 建立本地环境首先，cd 到刚才 hexo init 的那一级目录：结构大概如此 123➜ Web Site ls_admin-config.yml config logs node_modules package-lock.json public source website_config.yml db.json null package.json scaffolds themes 登陆1➜ ~ tcb login 在弹出的窗口登陆即可 创建环境输入 1$ tcb init public 参数如下选择，回车确定 123456➜ Web Site tcb init public✔ 选择关联环境 · blog - [blog-1945c4:空]✔ 请输入项目名称 · website✔ 选择开发语言 · Node✔ 选择云开发模板 · Hello World✔ 创建项目 website 成功！ 部署1$ tcb hosting:deploy public -e 你的envid 可以这样查看 envid（就是项目名➕一堆字符） 如下结果说明部署成功 1234567➜ Web Site tcb hosting:deploy public -e blog-1945c4文件传输中 [==================================================] 100% 0.0s✔ 部署完成 👉 http://url.url # 这个就是部署好的地址✔ 文件共计 55 个✔ 文件上传成功 55 个✖ 文件上传失败 0 个 浏览器打开这个网址就能看到了 配置打开_config.yml 把url修改为你刚才访问的网址 123456789# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://blog-1945c4-1255489341.tcloudbaseapp.com/root: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing 'index.html' from permalinks trailing_html: true # Set to false to remove trailing '.html' from permalinks 重新生成并部署 12$ hexo clean &amp;&amp; hexo g$ tcb hosting:deploy public -e 你的envid #跟刚才一样 现在页面链接应该正常了 注意事项 要选择方案为按量计费、免费额度 要修改网站根目录的 _config.yml 中的url 部署方式为12$ hexo clean &amp;&amp; hexo g$ tcb hosting:deploy public -e 你的envid #跟刚才一样 注意那个箭头啊，$符啊什么的都是终端提示符，别一股脑全粘进去了 另外，如果你想使用评论或其他的功能，请把url替换掉 还有，你们可能觉得这个域名长的难以忍受，不过不慌，会介绍自定义域名的。如果你使用hexo d的话还是可以部署到github的，只不过链接会跳转到这里 如果有问题请评论，我会看到的","categories":[{"name":"Develop","slug":"Develop","permalink":"http://hiztr.cn/categories/Develop/"}],"tags":[{"name":"Website","slug":"Website","permalink":"http://hiztr.cn/tags/Website/"}]},{"title":"我的世界像素生成器使用指南","slug":"Pixel-gen-user-guide","date":"2020-05-23T06:53:04.000Z","updated":"2020-06-05T11:31:48.659Z","comments":true,"path":"2020/05/23/Pixel-gen-user-guide/","link":"","permalink":"http://hiztr.cn/2020/05/23/Pixel-gen-user-guide/","excerpt":"一个可以在线将图片转换为 Minecraft 像素画的应用","text":"一个可以在线将图片转换为 Minecraft 像素画的应用 地址https://helloworldztr.github.io/mc/ Change Log1234567891011### 0.1 基本功能#### 0.1.0 基本功能#### 0.1.1 修复色彩, canvas#### 0.1.2 加入多线程，阈值#### 0.1.3 Canvas 绘图优化#### 0.1.4 加入自定义","categories":[{"name":"Develop","slug":"Develop","permalink":"http://hiztr.cn/categories/Develop/"}],"tags":[]},{"title":"个人博客搭建—使用图床","slug":"Image-hosting-tips","date":"2020-05-17T04:00:00.000Z","updated":"2020-06-05T11:29:39.669Z","comments":true,"path":"2020/05/17/Image-hosting-tips/","link":"","permalink":"http://hiztr.cn/2020/05/17/Image-hosting-tips/","excerpt":"继续填坑，来说怎么向文章里添加图片","text":"继续填坑，来说怎么向文章里添加图片 图床简介图床就是一个存储图片并向互联网提供这些图片的服务器，一般会使用 cdn 等使访问速度较快。 为什么要使用图床 服务器承担不了过大的请求数量 服务器访问缓慢 更稳定安全的存储（注意某些并不安全，会突然暴毙） 在最早的文章中，我选择了使用 Github 的免费托管。众所周知在国内 Github 访问是很慢的，所以不用图床会极大影响加载速度和用户体验。 使用方法首先，介绍下国内使用还算不错的服务商： 七牛 sm.ms imgurl 我现在再用 sm.ms 的，主要是免费还不用注册(最近上传有些慢不知为什么)。 准备好你要的图片 小技巧：截图快捷键Windows 用户: Windows+Shift+S (Windows 10) 或 PrintScreen 键mac 用户: Command+Shift+4 (区域截图) 按一下空格切换到窗口截图 注意，如果网速不好压缩一下也是个好办法。压缩网址https://tinypng.com 上传 说的很清楚：把文件拖到这里，或者复制粘贴 使用 选择 markdown，复制下来插入 markdown 源码即可。注意别粘错了 看起来像这样 1![提示语](url) 刷新一下就能用啦","categories":[{"name":"Develop","slug":"Develop","permalink":"http://hiztr.cn/categories/Develop/"}],"tags":[{"name":"Website","slug":"Website","permalink":"http://hiztr.cn/tags/Website/"}]},{"title":"个人博客搭建—使用 Gitalk","slug":"Gitalk-register-and-use","date":"2020-04-08T23:16:44.000Z","updated":"2020-06-05T11:28:52.696Z","comments":true,"path":"2020/04/09/Gitalk-register-and-use/","link":"","permalink":"http://hiztr.cn/2020/04/09/Gitalk-register-and-use/","excerpt":"上一篇说了基本的静态博客搭建，这里补充一下评论系统的使用方法。","text":"上一篇说了基本的静态博客搭建，这里补充一下评论系统的使用方法。 为什么上一篇文章说过，静态博客就只是一堆 html 页面，并没有后台，自然也不能响应动态请求。而评论需要有存储、响应请求……自然是不能实现。 然而并不是不能实现，serverless无服务器的技术可以帮我们解决这个难题。Gitalk 是一个 js 插件，能使用Github账号来登陆，并将用户的评论转为 issue 存到仓库里。又剩下了一笔资金是不是。更方便的是它不需要备案就可以直接使用。 怎么做首先你得有个 Github 账号（都用 Gitpage 了怎么就没有 GitHub 账号）其次你的主题最好支持配置 Gitalk，就省的写代码了。类似如下这样 123456gitalk: # gitalk. https://gitalk.github.io/ owner: HelloWorldZTR #必须. GitHub repository 所有者，可以是个人或者组织。 admin: HelloWorldZTR #必须. GitHub repository 的所有者和合作者 (对这个 repository 有写权限的用户)。 repo: HelloWorldZTR.github.io #必须. GitHub repository. ClientID: #必须. GitHub Application Client ID. ClientSecret: #必须. GitHub Application Client Secret. 注册 OAuth 应用你的头像- Settings 点击 Developer Settings （最下） 选择 OAuth Apps 并新建一个 OAuth App 填写表格 Application name: 应用名，用户在使用 Github 账号登陆时可以看到。要可信，明确用途，我是博客评论就写blog comment Homepage URL: 博客网址，没得说 description可以写，也可以不写 Callback URL：登陆后跳转到的 URL 和博客地址相同即可 添加评论复制他给你的两个 ID 填写到你的配置文件里（themes/xxx/_config.yml） 123456gitalk: # gitalk. https://gitalk.github.io/ owner: HelloWorldZTR #必须. GitHub repository 所有者，可以是个人或者组织。 admin: HelloWorldZTR #必须. GitHub repository 的所有者和合作者 (对这个 repository 有写权限的用户)。 repo: HelloWorldZTR.github.io #必须. GitHub repository. ClientID: xxxxxxxxxxxx #必须. GitHub Application Client ID. ClientSecret: xxxxxxxxxxxxxx #必须. GitHub Application Client Secret. 重启一下服务器 应该能看到这样的东西 （登陆可能有点慢，刷新一下就不会显示 Network Error 了） 发一条评论，应该可以看见 issue 了","categories":[{"name":"Develop","slug":"Develop","permalink":"http://hiztr.cn/categories/Develop/"}],"tags":[{"name":"Website","slug":"Website","permalink":"http://hiztr.cn/tags/Website/"}]},{"title":"个人博客搭建指南","slug":"WebSite-Build-instruction","date":"2020-04-08T08:29:02.000Z","updated":"2020-06-05T11:33:53.759Z","comments":true,"path":"2020/04/08/WebSite-Build-instruction/","link":"","permalink":"http://hiztr.cn/2020/04/08/WebSite-Build-instruction/","excerpt":"让我们来聊一聊关于搭建静态个人博客的一些小事","text":"让我们来聊一聊关于搭建静态个人博客的一些小事 建站指南 我写的一系列指南，让你能快速建立一个和这个网站一样简洁有用的个人博客站点 ⚠️！！如果你想建一个更便捷有用的网站，建议查看静态网站部署的那一篇 长文请配合目录食用，左下角有个⚓️图标，点击可展开目录 原因这个纯粹是说给自己看的，相信大家既然有搭建自己博客的想法，肯定就知道为什么了。首先，大多数博客网站像CSDN、博客园啥的限制很多，个性化很少，像新浪博客直接就 pass掉。其次，纯粹是一种程序员的热情，谁都不想让自己的心血白白浪费，自然需要一个 decent 的地方来挥洒自己的热情。最后，不论谁都会有很多事情想记录和分享出来。综上，搭建一个个人博客原因很充足了吧？幸运的事我们不需要花很多时间或精力，大约需要 100 元/年 的开销和 1 小时左右的时间。(如果你不要域名甚至可以不花钱) 分类纯当科普，大佬请跳过。这类网站有两种，静态和动态。静态就是不需要服务器的形式，直接渲染成 html，交互操作（评论，访问量）就全靠 js(javascript)了。最出名的有hexo、Jekyll、Hugo之类的。通常不需要多少服务器开销，功能基本够用。再是动态，不得不说的就是wordpress,这种网站就要用真正的服务器了，要有数据库、webserver……就是那些php,jsp,asp写的网站。当然就得为服务器出把血了（参考价1000元/年），好处就是有酷炫功能（登陆、论坛什么的） 服务器我们这里不说真正的服务器，只搞静态的网站（穷就完事了）跟随大众，选（白嫖） GitPage 没错。 GitPage优点：完全免费、老牌稳定缺点：国内访问慢、百度不收录 解决方法我的博客就在 Github 上，你需要： 注册一个 GitHub 账号 创建一个仓库，名叫你的账号.github.io，往里面上传一个index.html 访问https://你的账号.github.io就能看到你的 index.html 了 访问慢、百度不收录：随便办一个 CDN（内容分发网络）（10 元/年），后面详述。 CodingPage被腾讯收购后成了静态网站托管，看似要收费实际不会收费。有空我去试试。https://cloud.tencent.com/product/wh OBS 对象存储如果你都不想用，可以办一个对象存储服务(本质上原理相同)，总而言之可行而不好用。 博客本体最重要的部分，即hexo、Jekyll、Hugo之类的，下面详细记述 hexo 的安装过程。 前提条件 注册一个 GitHub 账号 创建一个仓库，名叫你的账号.github.io 安装 node.js 并配置打开官网,无脑下载。 终端执行如下命令，无输出。（切换镜像源，不然卡死你） 1npm config set registry https://registry.npm.taobao.org 安装 git打开官网，无脑下载（linux,mac不用下载，系统自带） 安装一路 Yes 安装 hexo先建好一个空的文件夹，cd 到上一层目录，执行：(注意，windows powershell 会鬼畜，cmd就好) 12npm install -g hexo-clihexo init 你的文件夹名字 启动，关闭 hexo1hexo s 打开浏览器localhost:4000就能看到了按Ctrl + c退出 安装一大堆插件123456npm install hexo-wordcount --savenpm install hexo-generator-json-content --savenpm install hexo-generator-feed --savenpm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --savenpm install hexo-deployer-git --save 安装主题如果你要用 Gitpage，记得不要用太多图片的主题，会很卡 1git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 是cofess的主题，很简洁 配置有两个文件，themes/pure/_config.yml和_config.yml，优先修改第一个 在_config.yml文末，修改如下(repo一行自己修改为仓库的ssh)，这样他会直接提交到你的仓库里。 1234deploy:type: gitrepo: git@github.com:HelloWorldZTR/HelloWorldZTR.github.io.gitbranch: master 顺便改个主题 1theme: pure 重新生成一下，不然不会生效 1hexo clean &amp;&amp; hexo g 另外，还要修改诸如作者名、网址、网站名、评论插件等，各个主题皆有不同，请参考 readme 和百度 配置ssh借用一下思否的图生成ssh公钥 123456git config --global user.name \"用户名\"git config --global user.email \"邮箱地址\"ssh-keygen -t rsa -C '上面的邮箱'# 三次回车 =&gt; 密码为空cat ~/.ssh/id_rsa.pub 把刚才的cat输出拷贝粘贴到框里 写文章，发表写文章12hexo new post \"文章名称\" #新建文章hexo new page \"页面名称\" #新建页面 他会输出一个地址，你打开它就可以编辑了(紫色显示) 文章格式12345678910111213---title: 标题date: 时间 xxxx-xx-xx xx:xx:xxcategories:- #分类，只有一个tags:- #标签，可有多个toc: true #是否显示目录desciption: \"简介，在搜索时可以看到，不要太长\"---文章简介，可以在主页看到&lt;!-- more --&gt;正文 友链、分类、标签页面的开启 不方便说明，百度或看 readme 发表12hexo clean &amp;&amp; hexo g # 重新生成hexo d # 发布到 Github 域名有名网址，不想输xxx.github.io，还想再个性化点？花钱买个域名就好啦。 不想用分配的域名，自己去 狗爹网 或国内平台办理即可。不同域名价格差很大，记得货比三家～ 然后在 DNSpod 中配一下即可，如果有CDN要关联。具体做法可以百度，我马上就去填坑 CDN如果你想用 Gitpage 的话，这点钱花的有必要。具体做法不多说，记得是 CDN 内容分发网络，套餐选 按需计费 即可，每年 50G 对博客站完全足够。大家可以货比三家，好好算算价钱。 我会详细介绍域名和 CDN 的使用方法。 其他事项你需要去搜索引擎提交你的网站，不然没有流量 评论系统见这里https://helloworldztr.github.io/2020/04/09/Gitalk-register-and-use/","categories":[{"name":"Develop","slug":"Develop","permalink":"http://hiztr.cn/categories/Develop/"}],"tags":[{"name":"Website","slug":"Website","permalink":"http://hiztr.cn/tags/Website/"}]},{"title":"黑苹果 ATI HD 显卡通用驱动方式及 HD 5450 的驱动","slug":"Hackintosh-ATI-Driver","date":"2020-03-10T09:37:32.000Z","updated":"2020-05-26T05:21:53.765Z","comments":true,"path":"2020/03/10/Hackintosh-ATI-Driver/","link":"","permalink":"http://hiztr.cn/2020/03/10/Hackintosh-ATI-Driver/","excerpt":"这篇文章将不采用任何付费的 kexts，用苹果的原生机制驱动我们的显卡。","text":"这篇文章将不采用任何付费的 kexts，用苹果的原生机制驱动我们的显卡。 前言 非常感谢这位博主的博客不仅启发了我，而且解决了我的问题转载http://blog.csdn.net/wr132/article/details/54837303我个人的显卡是HD 5450。这篇文章将不采用任何付费的 kexts，用苹果的原生机制驱动我们的显卡。现在我整理了相关资料，希望能帮助大家 注意，你需要使用 ATI HD 显卡， CLover 引导 另外，这里只写了 HD 5xxx/6xxx 的相关信息，若果是其他的显卡可能需要爬帖找找资料，但是希望这篇文章可以启发一下 :D还有，如果你在用 HD 5xxx/6xxx 显卡装 Mojave 或 Catalina ，请老老实实换回 High Sierra，或者扔了显卡，去深水宝淘一个黑苹果免驱卡（这些显卡不支持新 Metal，根本就不能用，从 HD 7xxx 才支持） 显卡不正常驱动的表现在黑苹果过程中，驱动显卡可谓最重要的一步了，因为没有驱动，你的电脑会成这样： 5M 的显存 (虽然跟我的 512M 差不多) 显卡型号不能显示 1280x720 的白内障分辨率 卡成 xxx 的启动器 没有透明等炫酷特效 撕裂严重 如果你上面的问题都没有遇到，那么就恭喜你已经驱动好显卡了，或者苹果本身就支持你这张显卡。这也引出了我们操作的原理。 操作原理及具体操作这里我们将通过 Clover 注入显卡虚假 ID ，让系统认为安装的显卡是原生支持的，从而驱动。这里只列出了 ATI 显卡，不过其他的 A卡或许也可以通过这种方法驱动。 我将把 ID 表放在文末 挂载 EFI 分区这里需要用到 Clover 做引导，并下载安装 Clover Configurator 打开 Clover Configurator，选择挂载分区。 挂载你启动用的 EFI 分区，输入密码。 打开配置文件点击最左下角的图标，导入你的 config.plist (下面开始可能会有风险，推荐全部看完后再决定尝试) 修改 fake ID按 command + 空格呼出菜单,打开System Information.app选择图形卡/显示器，里面有设备 ID，记下来我这里的显卡 ID 是0x68e0 (设备 ID 和虚假 ID 一样，因为我已经注入成功了，但是本来不是这样的，本来是0x68E1)在文末的支持对照表内找到型号、ID 相似的显卡，复制下来表中的ID我在这里找到的虚假 ID 是0x68E01002 (5470m,虽然是移动显卡但可以正常驱动)非常巧，5470m配合我的i5-2400刚好组合成了imac mid2011的配置（imac12,2），顺带也可以把smbios注入进去。 注入显卡在 Clover Configurator 中选择设备设置栏，在仿冒 ID 里 ATI 中写上虚假 ID 再转到显卡设置栏，钩上注入ATI/AMD 显卡选项，在 FB名称中选择你那个系列的名称。 这里有点问题，具体选哪个 FB 取决于你显卡的接口类型，本来应该按照那位博主的博客是该选 Eulemur 的，但最后还选了 Baboon这里可以使用AMD Framebuffer Utility来选择 FB，但事实证明瞎猜也是可行的方法（但是等你看完了再去猜）。 点击最左下角的保存文件按钮 调试我按照那位博主的方法，成功驱动了显卡，但当我一重启，居然黑屏了。我发现系统正常启动，但是显卡没有输出。经过一番查询、翻贴，发现是 FB 的问题。如果你也出现了黑屏，请先别着急放弃： 在启动之前选择 Option打开Graphics Injector再把 Inject ATI 的钩去掉，就可以正常启动了，然后再重复以上步骤，修改 FB或者，你可以直接在 CLover 中 FB config 输入FB 名。 最后说一句，黑苹果要的是耐心，当然你可以不挨个尝试 FB 名称，而直接注入 FB， 但是由于 AMD Framebuffer Utility 貌似找不到，所以这种方法反倒是节省了时间。一句话，干他就完事了。 截图为证 后话这里说说我为什么不能使用那个博主的 FB 驱动 HD 5450因为我的显卡是 DDVI 接口的，可以分出两个 VGA所以 FB 是Baboon（据推测）如果大家的也是dell 的 OEM 卡，也是 DDVI 的，直接照着这个做就行。若不是，可能就得花时间挨个尝试了。最后祝大家早日吃上黑苹果:P ID 列表这里列出的是来自百度问答的 ID 表，也存起来防吞。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677ATI5系列全部ID0x68981002 58700x68991002 58500x68E01002 5470m 6370m为68E4&#x2F;&#x2F;8.22更新0x68E11002 5430&#x2F;5450&#x2F;5430m0x68D81002 56700x68C01002 5730m 6570m0x68C11002 5650m 6550m0x68D91002 56300x68B81002 57700x68B01002 5870m ?0x68B11002 未找到 很有可能是5700Series或5800m Series0x68A01002 5870m0x68A11002 5800m SeriesATI6系列全部ID0x67681002 CAICOS GL PRO(专业卡)0x67701002 6400 series0x67791002 64500x67601002 6470m0x67611002 6430m0x67501002 65700x67581002 66700x67591002 65700x67401002 6730m0x67411002 6650m 6625m&#x2F;7610m0x67451002 未找到 很有可能是6600m&#x2F;6700m Series或6600Series0x67381002 68700x67391002 68500x67201002 6990m0x67221002 BARTS GL2 (专业卡)0x67181002 69700x67191002 69500x68401002 7670m0x68411002 7500m&#x2F;7600m series0x67041002 CAYMAN GL PRO (专业卡)AMD加速剂驱动AMDBartsGraphicsAccelerator0x67381002 68700x67391002 6850 6790可替换这个ID0x67201002 6900m0x67221002 BARTS GL2 (专业卡)AMDCaicosGraphicsAccelerator0x67681002 CAICOS GL PRO(专业卡)0x67701002 6400 series0x67791002 64500x67601002 6470m0x67611002 6430mAMDCaymanGraphicsAccelerator0x67181002 69700x67191002 69500x67041002 CAYMAN GL PRO (专业卡)AMDCedarGraphicsAccelerator0x68E01002 5470m 5450&#x2F;6370等卡替换这个IDAMDCypressGraphicsAccelerator0x68981002 58700x68991002 5850AMDJuniperGraphicsAccelerator0x68B01002 5800m Series0x68B11002 未找到很有可能是5700Series或5800m Series0x68A01002 5870m0x68A11002 5800m Series0x68B81002 5770 5750&#x2F;6770&#x2F;6750可在这替换IDAMDLombokGraphicsAccelerator0x68401002 6700m series0x68411002 6600m seriesAMDRedwoodGraphicsAccelerator0x68D81002 56700x68C01002 5730m 6570m0x68C11002 5650m 6550m0x68D91002 5630AMDTurksGraphicsAccelerator0x67501002 65700x67581002 66700x67591002 65700x67401002 6700m series0x67411002 6600m series0x67451002 未找到 很有可能是6600m&#x2F;6700m Series或6600Series 我们要通过操作，注入以下支持显卡的 ID：(不一定百分百准确，笔记本显卡不一定真的支持) HD 台式机原生显卡 | HD 笔记本原生显卡(m) 名称 ID 名称 ID 5630 0x68D91002 5430m 0x68E11002 5670 0x68D81002 5470m 0x68E01002 5770 0x68B81002 5650m 0x68C11002 5850 0x68991002 5730m 0x68C01002 5870 0x68981002 5800m series 0x68A11002 6450 0x67791002 6470m 0x67601002 6570 0x67501002 6600m series 0x68411002 6670 0x67581002 6700m series 0x68401002 6850 0x67391002 6900m 0x67201002 6870 0x67381002 7500m/7600m 0x68411002 123456789移动版原生支持的有：5系列:5430m、5470m、5650m、5730m、5800m 系列（除了5870m之外，其他5800m系列的具体ID我并没有查到，如果知道的话请补充）6系列: 6470m、6600m series、6700m series、6900m、7500m&#x2F;7600m series（具体型号我查不到，希望知道的童鞋补充）而6550m和6570m完全是5650m和5730m的马甲卡，ID都是一样的，对系统来说完全没有区别。笔记本原生支持不等于免驱，继续往下看吧。台式机的话：桌面卡可以原生支持的有5630 5670 5770 5850 58706450 6570 6670 6850 6870","categories":[{"name":"Hackintosh","slug":"Hackintosh","permalink":"http://hiztr.cn/categories/Hackintosh/"}],"tags":[]},{"title":"Logistic Regression 的通俗解释","slug":"Simple-explain-to-logistic-regrssion","date":"2020-03-05T01:23:52.000Z","updated":"2020-05-26T05:21:16.281Z","comments":true,"path":"2020/03/05/Simple-explain-to-logistic-regrssion/","link":"","permalink":"http://hiztr.cn/2020/03/05/Simple-explain-to-logistic-regrssion/","excerpt":"最近开始学习机器学习，了解了Logistic Regression 的原理。我个人认为，Logistic Regression 是机器学习最基础的模型，它诠释了机器学习的基本原理。","text":"最近开始学习机器学习，了解了Logistic Regression 的原理。我个人认为，Logistic Regression 是机器学习最基础的模型，它诠释了机器学习的基本原理。 Logistic Regression (Logistic 回归) 的通俗解释最近开始学习机器学习（怎么感觉这句话怪怪的），了解了Logistic Regression 的原理。我个人认为，Logistic Regression 是机器学习最基础的模型，它诠释了机器学习的基本原理 先来一张经典的图 Logistic Regression 的目的我们先忘了上面那张图，来看一张干净简单一点的：（纯手画有点丑） 这个过程很简单，便是根据已有的参数给出一个答案 我们先来看一下这里面的参数： x1 和 x2 ：输入的参数 w1 和 w2 ：权重（先不用管） b ：biase（也不用管） 我们再来更形象地描述一下： 比方说你有一个房子，有两个属性：房屋面积 x1 ，卧室数量 x2 （大佬给出的例子）你现在要通过上图的方法，给出你对这个房子的判断：这是不是个好房子 虽然这个例子主观性过强，但我们假设只要 x1 x2 一定，这个房子就是好房子 总结一下：输入 x1 x2输出 一个判断 y Forward Propagation 正向传播我们现在讨论的东西，是关于如何给出判断的，图中已经给出了，相信很容易看懂。 我再写一遍：z = w1*x1 + w2*x2 + by = σ(z) 但他们都是什么意思呢？ x1 x2 我们已经知道了，但是w1 w2表示了什么呢？学过OI的可能知道w是Weight的缩写，译为权重。你可以想象，如果房屋面积 x1 对我很重要，那我就让 x1 乘上一个很大很大的数 w1，那么它就会对最终的值产生更大的影响 哪b呢？b是biase的缩写，译作偏差。很容易理解，如果你的预测总是差了0.00001，那么加上个0.00001不久一劳永逸了么 总结一下：w ： 控制对应 x 对结果的影响b ： 微调结果 σ(z)是啥呢？ 来张sigmoid函数的靓照 有点感觉了没有？它把 y 的值切成了两部分 0 ~ 0.5 和 0.5 ~ 1, 分别对应着 z 中 &lt;0 和&gt;0 的范围。所以σ(z)的作用：把 z 的值转换为判断 σ(z)&gt;0.5 时 判断为真（当然假也行）σ(z)&lt;0.5 时 判断为假（同上） Backward Propagation 反向传播刚才我们解释了怎么用正确的 w 和 b 来判断，但是它们是怎么来的？……靠蒙的你信吗…… 一开始，我们的 w 和 b 都取的是随机数，当然不能给出完全正确的答案。所以呢，我们需要微调 w 和 b ，让最终结果向真正的 y 靠拢。（注意这个图中 y 成了 a ，因为不是最终答案） 下面将是本文中最吓人的部分请洗把脸再看（实际上你不需要过多的了解） 我们既然要让结果向真正的 y 靠拢，就需要一个函数来判断它的偏差，这里就轮到 Loss 函数登场了。（图中最后一个方框的 L ）由于方法众多，公式冗长，你可以将它看作方差(y-a)^2 知道了目标，具体的靠拢方法就要请到梯度下降法了（当然还有更多[转载自博客]） 是不是挺像下山？我们的目标是 Loss 最小（J 函数是全局的 Loss），求出最小，即使是局部最小，也对我们有极大帮助。 等一下，我们是不是只求出了 Loss 最小，但是 w 和 b 还不知道呢。这时候就需要导数了。当然我们可以不知道，我觉得就是一个神奇的规律，建立在 Loss 和 w 、b 之间。这样，运用那种我们不太熟悉的神奇规律，就能优化 w 和 b 的值了。这就是机器学习最重要的一步 Optimize （优化）。 现在，我们已经万事俱备，只欠东风了。现在机器已经知道了学习方法，就是时候给它灌教辅资料了。 Training 训练这里不必多说，机器学习总是建立在大数据之上的，没有大数据的支持，机器学习的存在就没有意义。现在假设我们拥有很多很多组房屋的数据 x1, x2，和你对它们的看法 y={0, 1}。你便可以将它们灌给机器，执行一次正向传播，得出偏差之后，再进行一次反向传播，优化 w 和 b。 Test 测试当你把它们都灌给机器后，你已经得到了近似完美的 w 和 b，现在，你只要输入未知的的 x，你就能得到近似正确的 y。 好啦，写到这里差不多就这样了，原理从中可以看出，但具体的推导和向量化优化以及跟优化的激活函数，还需要进一步的学习。 如果你觉得我文中有不妥或错误，欢迎跟我交流 图形上的意义 如图，圈点代表着好房子，叉点代表着不好的房子 我们求出的，实际是好房子与不好房子的分界线（蓝线） 我们这里解决的是一个二分分类的问题，实际上也是机器学习最基础的也是最早的问题。当然也比较有意思。","categories":[{"name":"Other","slug":"Other","permalink":"http://hiztr.cn/categories/Other/"}],"tags":[]},{"title":"Spring Boot 注入静态变量","slug":"Static-Inject-in-Springboot","date":"2020-03-04T13:00:30.000Z","updated":"2020-05-19T09:04:52.965Z","comments":true,"path":"2020/03/04/Static-Inject-in-Springboot/","link":"","permalink":"http://hiztr.cn/2020/03/04/Static-Inject-in-Springboot/","excerpt":"你承受过NullPointerException的痛苦吗？Spring Boot的静态变量注入使我体会到了生命的意义（手动滑稽）","text":"你承受过NullPointerException的痛苦吗？Spring Boot的静态变量注入使我体会到了生命的意义（手动滑稽） 如果你曾经试过如下的一段代码 12@Value(\"$&#123;database.driver&#125;\")private static String driver; 如果程序鲁棒性不好，你便会得到一个NullPointerException反正是不能达到你想要的目的，给静态变量赋值。 解决方案 用一个非静态的变量当中介，像这样 1234@Value(\"$&#123;database.driver&#125;\")private String _driver;private static String driver; 然后在构造函数中将_driver赋给driver即可 写一个non-static的set方法，像酱紫 1234567public class BaseDao&#123; private static String driver; @Autowired public void setDriver(@Value(\"$&#123;database.driver&#125;\") String driver) &#123; BaseDao.driver = driver; &#125; &#125; 注意事项 set方法一定是non-static的 一定要小心加载顺序，static代码块不要随便写，不然又是NullPointerException","categories":[{"name":"Develop","slug":"Develop","permalink":"http://hiztr.cn/categories/Develop/"}],"tags":[{"name":"java","slug":"java","permalink":"http://hiztr.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"http://hiztr.cn/tags/springboot/"}]},{"title":"Java仿制GUI系统控制台","slug":"Make_a_gui_in_java","date":"2020-03-04T13:00:00.000Z","updated":"2020-06-05T11:30:25.933Z","comments":true,"path":"2020/03/04/Make_a_gui_in_java/","link":"","permalink":"http://hiztr.cn/2020/03/04/Make_a_gui_in_java/","excerpt":"在使用Java编程的时候，你可能会厌倦那个黑色的框框控制台，然而，在你使用GUI时，有些时候又会怀念那个框框。我现在便遇到了这样的一个情况，需要仿制一个系统控制台来显示系统输出(System.out和System.err)，分开显示。","text":"在使用Java编程的时候，你可能会厌倦那个黑色的框框控制台，然而，在你使用GUI时，有些时候又会怀念那个框框。我现在便遇到了这样的一个情况，需要仿制一个系统控制台来显示系统输出(System.out和System.err)，分开显示。 用PrintStream仿制GUI系统控制台 不要试图在大型应用内使用PrintStream，因为他永远不会抛出IOException，调试用用算了 在使用Java编程的时候，你可能会厌倦那个黑色的框框控制台，然而，在你使用GUI时，有些时候又会怀念那个框框。我遇到了这样的一个情况，便是需要仿制一个系统控制台来显示系统输出(System.out和System.err)，分开显示。之所以说是仿制，因为只能输出不能输入（而且很丑）。主要思路是用两个PrintStream（重写了write函数）来替代System.out和System.err 代码Main.java主程序，将输出重定向 123456789101112131415161718192021package com.ztr;import com.ztr.frames.ConsoleFrame;import java.io.PrintStream;public class Main&#123; public static void main(String[] args) throws Exception &#123; PrintStream sysOut = System.out; PrintStream sysErr = System.err; /*获取控制台输出*/ ConsoleFrame.init(); System.setOut(ConsoleFrame.getSysOutps()); System.setErr(ConsoleFrame.getSysErrps()); ConsoleFrmae.setVisible(true) /*这里往下的输出都会被重定向到ConsoleFrame的texrarea*/ System.out.println(\"blablabla\"); /*恢复原始输出！！,小心被坑*/ System.setOut(sysOut); System.setErr(sysErr); &#125;&#125; ConsoleFrame.java一个静态的类，用来显示仿制的Console,在其中重写了PrintStream 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172package com.ztr.frames;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.WindowEvent;import java.awt.event.WindowListener;import java.io.IOException;import java.io.PrintStream;public class ConsoleFrame &#123; private static Frame f; private static Panel out, err; private static TextArea console, consoleErr; private static PrintStream SysOutps = null, SysErrps = null; public static void init() &#123; f = new Frame(\"System Console\"); CardLayout layout = new CardLayout(); f.setLayout(layout); out = new Panel(); out.setLayout(new GridLayout(2, 1)); console = new TextArea(); console.setColumns(100); console.setRows(50); consoleErr = new TextArea(); consoleErr.setColumns(100); consoleErr.setRows(50); consoleErr.setBackground(Color.pink); /*重写方法，把输出重定向，即append到对应的textarea上*/ SysOutps = new PrintStream(System.out) &#123; @Override public void write(int b) &#123; console.append(String.valueOf(b)); &#125; @Override public void write(byte[] buf, int off, int len) &#123; console.append(new String(buf, off, len)); &#125; &#125;; SysErrps = new PrintStream(System.out) &#123; @Override public void write(int b) &#123; consoleErr.append(String.valueOf(b)); &#125; @Override public void write(byte[] buf, int off, int len) &#123; consoleErr.append(new String(buf, off, len)); &#125; &#125;; out.add(console); out.add(consoleErr); f.add(out); f.pack(); f.addWindowListener(new WindowListener() &#123; @Override public void windowClosing(WindowEvent e) &#123; System.exit(0); &#125; &#125;); &#125; public static PrintStream getSysOutps() &#123; return SysOutps; &#125; public static PrintStream getSysErrps() &#123; return SysErrps; &#125; public static void setVisible(boolean vis) &#123; f.setVisible(vis);; &#125;&#125; 效果大概就是个很丑的框框（本来就是），我也懒得写，就用awt凑数了用SpringBoot的输出 几句话 不要试图在大型应用内使用PrintStream，因为他永远不会抛出IOException，调试用用算了 在用完PrintStream后一定要恢复原始输出，除非你知道关闭后会不会还有输出 PrintStream的核心是write函数，重写这个就够了（除非你有信心全部重写）","categories":[{"name":"Develop","slug":"Develop","permalink":"http://hiztr.cn/categories/Develop/"}],"tags":[{"name":"java","slug":"java","permalink":"http://hiztr.cn/tags/java/"}]},{"title":"修改 IDEA 自带的 maven 源","slug":"Change-Maven-in-Idea","date":"2020-03-03T16:00:00.000Z","updated":"2020-05-19T09:04:28.907Z","comments":true,"path":"2020/03/04/Change-Maven-in-Idea/","link":"","permalink":"http://hiztr.cn/2020/03/04/Change-Maven-in-Idea/","excerpt":"作死用过idea自带maven的都知道，在国内真的贼慢。就导入几个依赖就得花上大半个小时。于是我一番百度，果断更改了maven镜像源。现在记录下来以免再次踩坑。","text":"作死用过idea自带maven的都知道，在国内真的贼慢。就导入几个依赖就得花上大半个小时。于是我一番百度，果断更改了maven镜像源。现在记录下来以免再次踩坑。 如何提高idea自带maven的更新速度作死用过idea自带maven的都知道，在国内真的贼慢。就导入几个依赖就得花上大半个小时。于是我一番百度，果断更改了maven镜像源。现在记录下来以免再次踩坑。 过程 打开File - Settings 在搜索框内输入maven 打开如图所示的地址 修改， 加入如下代码 123456789101112131415161718192021222324252627&lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;uk&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://uk.maven.org/maven2/&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;CN&lt;/id&gt; &lt;name&gt;OSChina Central&lt;/name&gt; &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;internal nexus repository&lt;/name&gt; &lt;!-- &lt;url&gt;http://192.168.1.100:8081/nexus/content/groups/public/&lt;/url&gt;--&gt; &lt;url&gt;http://repo.maven.apache.org/maven2&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt;&lt;/mirrors&gt; 如图 重启一下idea，试试效果","categories":[{"name":"Develop","slug":"Develop","permalink":"http://hiztr.cn/categories/Develop/"}],"tags":[{"name":"java","slug":"java","permalink":"http://hiztr.cn/tags/java/"}]}],"categories":[{"name":"Develop","slug":"Develop","permalink":"http://hiztr.cn/categories/Develop/"},{"name":"Hackintosh","slug":"Hackintosh","permalink":"http://hiztr.cn/categories/Hackintosh/"},{"name":"Other","slug":"Other","permalink":"http://hiztr.cn/categories/Other/"}],"tags":[{"name":"Website","slug":"Website","permalink":"http://hiztr.cn/tags/Website/"},{"name":"java","slug":"java","permalink":"http://hiztr.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"http://hiztr.cn/tags/springboot/"}]}