{"meta":{"title":"HelloWorld","subtitle":"","description":"HelloWorldZTR is a Developer & PC Enthusiast in Shandong, China, loves coding and all kinds of things about computers.","author":"HelloWorldZTR","url":"https://hiztr.cn","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-04-07T02:32:24.000Z","updated":"2021-01-30T01:35:15.108Z","comments":false,"path":"/404.html","permalink":"https://hiztr.cn/404.html","excerpt":"","text":"从前有座山，山里有座庙， 庙里有个页面，现在找不到... ps:有些东西因为觉得水平太差删掉了，大家见谅"},{"title":"About","date":"2020-04-04T13:34:33.000Z","updated":"2021-01-29T02:06:38.462Z","comments":false,"path":"about/index.html","permalink":"https://hiztr.cn/about/index.html","excerpt":"","text":"Introduction学生党一枚玩 mc ，写代码，闲的没事刷刷网易云。b站同名，搬运些有趣的视频。 Something about this websitegitpage + hexo搭建，记录自己的成长。莫的备案，能找到这里是咱俩的缘分。"},{"title":"Categories","date":"2020-04-07T01:25:48.175Z","updated":"2020-04-07T01:25:48.175Z","comments":false,"path":"categories/index.html","permalink":"https://hiztr.cn/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2020-04-07T01:25:55.290Z","updated":"2020-04-07T01:25:55.290Z","comments":false,"path":"tags/index.html","permalink":"https://hiztr.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"联想 T470 黑苹果小记","slug":"t470-hackintosh","date":"2022-05-21T00:30:38.000Z","updated":"2022-05-21T01:55:57.787Z","comments":true,"path":"2022/05/21/t470-hackintosh/","link":"","permalink":"https://hiztr.cn/2022/05/21/t470-hackintosh/","excerpt":"前些天拿到了块新的 nvme 硬盘，顺道给之前没装上的 t470 装个黑苹果。","text":"前些天拿到了块新的 nvme 硬盘，顺道给之前没装上的 t470 装个黑苹果。 简介其实这台电脑本来不适合黑苹果，因为他的网卡和硬盘曾经都是无解的。但是现在有了itlwm和多余的硬盘，就可以安装黑苹果了。这台电脑其实性能很好，装黑苹果使用体验也很好，基本上是不会卡顿的。但是想真正达到白苹果的体验还得买个博通网卡玩玩隔空投送。 硬件一览 CPU Intel Core i7 7500U RAM DDR4 2133 2x4G 网卡 Intel ac8260 显卡 HD 520(已禁用独显) 机型 20JN(开头) 硬盘 换的杂牌m.2 128G 安装过程下载和制作安装盘我先用installinstallmacos下载了最新版 MacOS Monterey 的安装盘https://github.com/munki/macadmin-scripts/blob/main/installinstallmacos.py 然后，我在另一台 mac 上用如下命令刻录了一个启动 U 盘 1sudo /Applications/Install\\ macOS\\ Monterey.app/Contents/Resources/createinstallmedia --volume /Volumes/Udisk 其中 Udisk 是U盘的卷名，需要输入密码和确认出现提示时，请键入管理员密码，然后再次按下 Return 键。在您键入密码时，“终端”不会显示任何字符。出现提示时，请键入 Y 以确认您要抹掉宗卷，然后按下 Return 键。在抹掉宗卷的过程中，“终端”会显示进度。宗卷被抹掉后，可能会看到一条提醒，提示“终端”要访问可移除宗卷上的文件。点按“好”以允许继续拷贝。 如果你是Windows 用户的话，可以尝试用TransMac来制作安装盘，然后用DiskGenius直接打开EFI分区进行文件拷贝。这是我认为最便捷的方式了。 之后我制作了EFI，主要是从Github上找了个ACPI，然后更新了一下驱动和Clover引导器。EFI分享链接见文末. 链接: &lt;https://pan.baidu.com/s/1f0y4dfgZpfKnxaQHuTpcnw &gt;提取码: 04lo 然后，我用Clover Configurator 挂载上刻录好的安装盘的EFI 分区，把引导放了进去。 安装系统我把安装盘插到笔记本上，按F12选择启动项，成功进入了安装器。上一次因为PM981的原因没有安装成功，这一次换了硬盘，第一阶段安装没出任何问题。 但是在重启进入第二次安装阶段的时候，启动项没了。我试着从Preboot卷启动，没想到正常安装了。接着就是进入系统，配置各种设置，都是常规操作了。 进入系统我把EFI分区用Clover Configurator 克隆到了笔记本硬盘里，克隆EFI的过程同安装盘，然后检查了驱动，发现如下 部件 状态 显卡 显存 ✅ 网卡 WI-FI✅ 蓝牙❎ 声卡及输入输出 ✅ 电源管理 ✅ 触摸板小红点 ✅ 摄像头 ✅ 雷电 ❎ 息屏和休眠 ❎ 为了防止休眠后冻屏，我使用了如下命令关闭了休眠 1234sudo pmset -a hibernatemode 0sudo pmset -a autopoweroff 0sudo pmset -a standby 0sudo rm /var/vm/sleepimage EFI介绍及分享这个EFI主要是基于Github上的项目我做了如下改动 更新了大部分驱动和Clover 配置了itlwm来驱动 Intel网卡 修改了config.plist的语法错误 编译了T460的ACPI Table,使音响能正常驱动 链接: &lt;https://pan.baidu.com/s/1f0y4dfgZpfKnxaQHuTpcnw &gt;提取码: 04lo","categories":[{"name":"Hackintosh","slug":"Hackintosh","permalink":"https://hiztr.cn/categories/Hackintosh/"}],"tags":[]},{"title":"2022年 RB67 入坑指南","slug":"rb67-introduction","date":"2022-02-10T00:45:09.000Z","updated":"2022-05-20T14:01:40.304Z","comments":true,"path":"2022/02/10/rb67-introduction/","link":"","permalink":"https://hiztr.cn/2022/02/10/rb67-introduction/","excerpt":"我于2022年2月8日在闲鱼以3000的价格购得了一部玛米亚 RB67 pro 现在记录下来","text":"我于2022年2月8日在闲鱼以3000的价格购得了一部玛米亚 RB67 pro 现在记录下来 简介RB67 是玛米亚在上世纪七十年代开始制造的一款中画幅相机，可旋转的后背（Rotating Back）是该系列最显著的特征。 该系列共有三个产品，分别是Pro Pro S Pro SD其中Pro年代最久远，功能最少，所以很少见到；Pro S和SD都比较新，功能也相近，所以推荐的多。不知从啥时候开始，胶卷突然就火起来了。120相机也长得飞起，links和跑焦熊可谓是玛米亚本世纪代言人了（笑）。说起来中画幅的复兴，还得说道周杰伦的《说好不哭》。MV 中男主收到的哈苏503就是经典的一台中画幅相机。从此之后中画幅的价格就一路水涨船高，哈苏已经去到小一万，成为比肩徕卡的存在。身为穷人的我也只能选RB67和基辅这类大路货了。RB67这类120单反，最吸引人的，还是独特的腰平取景方式。这类取景器的美，是没使用过的人体会不到的。甚至有的时候会觉得，取景器里看到的画面比实际洗出来的胶片还要好看。又有谁不喜欢一个又大又亮的光学取景器呢？ 特性介绍镜头玛米亚的镜头差距相对还是很大的，我这台就是用了Sekor C 127mm f3.8镜头。有趣的是，这些镜头都是镜间快门。但是出身精工（做表的），这些快门也很准很有力，也算是名家出身了。 玛米亚全系的镜头分为最高贵的APO系列，新一些的KL系列，比较好的Sekor C系列和平平无奇的Sekor系列。这其中，APO价格极其昂贵，而且由于是长焦，重量十分感人，一般没人会买来用。KL系列是后期，相对来说效果会好一点，但是要注意是否配有RB67兼容接圈，毕竟这个圈也不好买。Sekor C是最推荐的镜头，因为它的性价比居高。Sekor因为比较老了，不是很推荐，备用的话也不是不行。 在选购上述镜头的时候要特别注意镜头是否起雾，由于胶合工艺问题，老些的镜头容易起雾。虽然可以解决，但是比较麻烦。 对焦屏玛米亚的增亮对焦屏原厂及最佳，并不是很需要裂像对焦，因为它实在是太大了，你要是说实在是看不清还有个放大镜。这个放大镜还是挺实用的，但要注意是不是老花镜片，不然就越看越不清了。原厂的对焦屏有一层有机涂层，注意磨砂面一定不能用酒精擦，不然就废了。 后背 初代67的后背比之前的结实多了，是纯金属的，拿在手里很有分量。我这台机原先机主摔了好几次都没坏。这些后背都带防多重曝光机构，但是如果机身不支持的话需要先掰一下计数窗对着的那个金属拨片(多重曝光手柄)才能过片。 记得拍照前拔豆腐刀（侧面）不然是按不下快门的。 其他事项玛米亚用的是3/8而不是常规的1/4脚架接口，一般商家都会附赠一个转接环。另外跑焦熊出了一款专用快装板，感觉很实用，可以接手柄。但是据说会头重脚轻？ 另外快门扳手不按到底是不会反弹的，但是反光板可能已经复位了，这时候直接按到底才能按快门。我第一次就被这个快门扳手摆了一道，怎么也按不动快门，没想到是这么回事😓。 另外玛米亚有反光板预升的功能，可以避免机器震动，但这时候你必须一台快门线，尤其是使用T门的时候。 另外玛米亚使用了皮腔对焦，这使得它能兼容很多奇怪镜头，但是这个东西可能会坏，幸好网上可以换。如果皮腔伸出来太长，需要根据机器侧面的曝光信息板增加曝光。 总结玛米亚RB67作为上个世纪最常见的影楼机必然有他的独特之处。他全金属的机身就说明了坚固耐用的特点，全模块化的设计为快速摄影提供了便捷，多种多样的安全设施最大程度降低了废片率。不得不说，这台相机不仅仅是相机，更是一件工业与艺术的结晶。作为中画幅新手的入坑之选，它实在是再合适不过了。四五十年后，再度捧起它来，洋溢在我心中的激动，与几十年前的那位摄影师应该一样吧。","categories":[{"name":"Other","slug":"Other","permalink":"https://hiztr.cn/categories/Other/"}],"tags":[{"name":"loafing","slug":"loafing","permalink":"https://hiztr.cn/tags/loafing/"}]},{"title":"2021 年 NEX-C3 折腾手记","slug":"nex-c3","date":"2021-07-18T23:22:36.000Z","updated":"2021-07-19T01:52:33.938Z","comments":true,"path":"2021/07/19/nex-c3/","link":"","permalink":"https://hiztr.cn/2021/07/19/nex-c3/","excerpt":"NEX-C3 是索尼发布于 2011 年 4 月的一款微单，可以说是索尼第一代微单家族中的一员。出于经济原因（咳），我在十年之后又不得不让它带病出征了。","text":"NEX-C3 是索尼发布于 2011 年 4 月的一款微单，可以说是索尼第一代微单家族中的一员。出于经济原因（咳），我在十年之后又不得不让它带病出征了。 我们先看一下参数: 主要性能 传感器类型 Exmor APS HD CMOS 传感器尺寸 APS画幅（23.5*15.6mm） 最大像素数 1650万 影像处理器 BIONZ Engine 最高分辨率 4912×3264(JPEG/RAW) 高清摄像 高清（720P） 显示屏像素 92.1万像素液晶屏 对焦点数 25点，49区测光 我仅花了600元就从闲鱼上蹲到了这台机器（1650套机)，可以说，这是入门摄影（手机除外）的最低门槛了。 优势价格低是我选择奶昔系列的首要原因。相比之下，3000大洋的全新在产a6000，除了像素、对焦等功能和evf（电子取景器）之外，并无太大优势。对于摄影小白来说，性价比着实不高。如果你觉得nfc，Wi-Fi传图很重要，那就加加钱上吧。 12345(a6000参数)传感器：APS画幅（23.5*15.6mm）有效像素：2430万显示屏尺寸：3英寸显示屏像素：92万像素液晶屏 一般情况下，这个1620W像素已经够用了，后期裁切也有空间。如果你想要比手机画质好一点的相机话，那么它可以满足你的需求。（另外说一下，像素低并不一定画质差。大家一定不要拿相机的像素和手机比，就算16mp拍出来效果也可以好过什么多少万像素的手机。同像素，传感器越大画质越好，所以不太推荐卡片机和手机。）另外该机器配有峰值对焦功能，配合手动镜头玩转接太香了。几乎市面上的全部卡口都可以转接，无穷远也合焦。我现在长期搭配200块星耀的35mm f1.7，等效50mm 拍拍风光人物都不错。用转接环玩老镜头也不错。 这个价位，要什么自行车。 劣势十年前的老机器了，总会多多少少有些不足之处。这个机器最大的三个问题是：按键失灵、屏幕脱膜和电池拉垮。 按键失灵指的是那个旋钮，上下左右可能颠倒错乱，但是旋转功能是正常的，正常调节光圈快门以及翻看照片是没有问题的。 另外屏幕这个问题比上一个还严重。大概是这个样子 平常室内使用也没什么问题，但是户外大太阳底下就啥也看不见。本来这个屏幕素质就差，加上没有取景器，只能通过屏幕取景，拍出来的照片就是这样的：（你实际拍出来的vs.你以为你拍出来的.jpg)我说这和a6000是一块屏幕你敢信？ 电池拉垮这也是没办法的事，索尼十年都没换掉垃圾的fw50。fw——废物，索尼也知道这玩意拉垮。拍个一百张就没电了。 当然这些问题都有解决办法，按钮可以在淘宝上买到配件，50一个不包邮，换起来也简单；屏幕可以买个液晶屏遮光罩，35一个；电池就买上一打，边充边用吧。 然而我就为了省这个三十五十的，又花回去了不合适吧。如果你也准备凑合着用，请注意这些问题 这是遮光罩的样子: 另外就是索尼通病了，迷宫菜单，蜜汁白平衡和拉垮套头。（selp 1650 f8gm没说你)当然这些问题后期多少也是可以修复的。 总而言之如果你准备买一个十年前的数码产品，最好还是知道它的通病，顺便降低一下你的期望。快门数、暗病虽然不太好听但也要问问卖家。 如果你能接受的了这些问题和潜在的问题，并且真正经济有限的话，那这个相机是你很好的选择。600的价格，用来记录生活，旅游拍照都很在行。摄影的乐趣不在于花钱，而是在于过程的体验。更重要的是，是你在用它，还是它在用你。只要方法得当，奶昔也能拍出大片。 毕竟老骥伏枥，志在千里，接下来的几年里，它就将陪我作伴，记录我的生活了。 样片儿","categories":[{"name":"Other","slug":"Other","permalink":"https://hiztr.cn/categories/Other/"}],"tags":[{"name":"loafing","slug":"loafing","permalink":"https://hiztr.cn/tags/loafing/"}]},{"title":"就国内 python 中文站的一点看法","slug":"thinks-on-python","date":"2021-07-02T03:13:32.000Z","updated":"2021-07-18T23:24:13.592Z","comments":true,"path":"2021/07/02/thinks-on-python/","link":"","permalink":"https://hiztr.cn/2021/07/02/thinks-on-python/","excerpt":"最近我想提高自己的python技能，于是着手编写一个有趣的小app。然而当我遇到了问题，准备去问问度娘时，直接被震惊了。","text":"最近我想提高自己的python技能，于是着手编写一个有趣的小app。然而当我遇到了问题，准备去问问度娘时，直接被震惊了。 点开前几个网站看，都是机翻stackoverflow的，读起来一点中文的感觉也没有。 1234tkinter由于事件循环，after方法和绑定，它本身是异步的。但是，如果您尝试使用asyncio它也是可行的，但是首先让我们考虑一下您尝试过的方法。您的第一次尝试显然是失败的，因为spam当它是时，您尝试作为泛型函数进行调用coroutine。您的其他尝试比第一次尝试更正确，但是await coroutine或者yield from coroutine只能用于从另一个协程启动协程，因此再次失败。因此，启动该野兽的正确方法是使用一种不言自明的方法（或old ，它只是一个已弃用的别名）来安排其执行时间。ensure_futureasync 再看看CSDN的，都是搬运来的，代码格式大概如下: 1def onClick( self, controlId ):#吧啦吧啦吧啦BaseWindow.onClick(self, controlId)if controlId == 810:self.selectRange(self.getControl(810).getSelectedPosition())#吧啦吧啦吧啦else:play(self.pdata[int(self.getControl(820).getSelectedItem().getLabel2())][&#x27;videoid&#x27;]) 我寻思为了这点流量至于整这么烂的活吗？真让我想起百度问答驴唇不对马嘴的回复。有被气到，文章就放在这，五年后看看有没有改善。当然了，也有不少人的博客表达清晰，简单明了，可惜总被搜索引擎藏着。希望他们的精神能被多多发扬吧。😮‍💨","categories":[{"name":"Develop","slug":"Develop","permalink":"https://hiztr.cn/categories/Develop/"}],"tags":[{"name":"loafing","slug":"loafing","permalink":"https://hiztr.cn/tags/loafing/"}]},{"title":"如何解决黑苹果睡眠 Kernel Panic（AppleHDAHDMI_DPDriver::setPowerState）","slug":"Powerstate-error-solution","date":"2021-01-31T08:29:15.000Z","updated":"2022-02-10T00:13:40.557Z","comments":true,"path":"2021/01/31/Powerstate-error-solution/","link":"","permalink":"https://hiztr.cn/2021/01/31/Powerstate-error-solution/","excerpt":"黑苹果系统睡眠后不能唤醒，而是在唤醒几秒钟后直接panic重启的解决方法。","text":"黑苹果系统睡眠后不能唤醒，而是在唤醒几秒钟后直接panic重启的解决方法。 日志如下 123panic(cpu 3 caller 0xffffff800202b747): &quot;AppleHDAHDMI_DPDriver::setPowerState(0xffffff801e31b800 : 0xffffff7f83d87730, 0 -&gt; 1) timed out after 10160 ms&quot;@/BuildRoot/Library/Caches/com.apple.xbs/Sources/xnu/xnu-6110.0.0.121.5/iokit/Kernel/IOServicePM.cpp:5277Backtrace (CPU 3), Frame : Return Addressbla bla bla...... 似乎这个问题只在 Haswell 架构的 CPU 出现。包括M73准系统很多EFI。 看到 Tonymacx86也有在讨论这个问题，我采取了一个更简便的方法。如果愿意研究的话可以仔细看看。 解决方法打开 Opencore Configurator （Clover 类似） 挂载 EFI 分区（下面一栏）文件 - 打开（选择你的config.plist）在Device Properties下面PciRoot(0,0x0)/Pci(0x1b,0x0)添加一个键No-hda-gfx,值为00000000（八个零）可以通过右下角的➕添加保存文件，重启电脑。试试看休眠是不是不会重启了呢","categories":[{"name":"Hackintosh","slug":"Hackintosh","permalink":"https://hiztr.cn/categories/Hackintosh/"}],"tags":[]},{"title":"联想M73黑苹果折腾","slug":"lenovo-m73-hackintosh","date":"2021-01-29T01:12:43.000Z","updated":"2021-07-02T07:26:05.336Z","comments":true,"path":"2021/01/29/lenovo-m73-hackintosh/","link":"","permalink":"https://hiztr.cn/2021/01/29/lenovo-m73-hackintosh/","excerpt":"该系统我使用了一段时间，体验极佳。完美支持 macOS Big Sur，刷视频写文档，写写代码（跑服务器当我没说）都很流畅，mc也能上60帧。基本满足大家的日常需求。","text":"该系统我使用了一段时间，体验极佳。完美支持 macOS Big Sur，刷视频写文档，写写代码（跑服务器当我没说）都很流畅，mc也能上60帧。基本满足大家的日常需求。 由于macOS的魔法优化，4G内存减去被核显吞掉的1G多还是绰绰有余。流畅度没的说，现在还有什么配置会卡 白色的出其意料的好看，特别mini，就跟全新的一样 配置如下 部件 描述 CPU i3 4330（其实应该买i3 4330T 搞错了） 内存 ddr3 1333 2g x2 （笔记本的，要什么自行车，主力机还是买两根4G的吧） 准系统 买的白的NEC的定制版(m73p)，配了个一看就是其他厂的65W电源，带盘架没网卡 硬盘 sata固态（我的旧电脑上扣下来的不要钱:P） 总价 520 + 硬盘钱 挺便宜的，大家买的时候注意看看，其实也不指望能用多久，毕竟垃圾佬么 折腾过程果真他人的力量是伟大的，我就把旧的macOS high sierra盘EFI分区一改（b站找的EFI）简单一装，电源一插，一开机就成了。给我惊到了 远景论坛： http://bbs.pcbeta.com/viewthread-1875281-1-1.htmlEFI： 链接: https://pan.baidu.com/s/1bOnmUC2P_5nbp3udTNN9VA密码: ljnp解压密码：XCer 如果有人想装这个黑苹果可以去下载EFI，再按照网上的教程做就行。 然后我从app store下载了个bigsur安装器，奇怪了，总显示下载出错。于是我整了个百试不爽的 Installinstallmacos.py，下载了完整版安装包，一个多小时就装好了(https://github.com/munki/macadmin-scripts)如果安装macOS\b显示服务器错误，使用该软件下载完整包即可。 系统信息 安装好后，我用opencore configurator把引导菜单去掉，注入了三码，打开 intel power gadget 一看,wtm空载60多度，我一度怀疑没涂硅脂（事实证明散热器安装压力小了点，大家拧到底就行） 后来，我在翻bios中发现了转机 戳爆F2进bios Power 选项卡 Intelligent Cooling Engine (ICE)选项 调成 Better Thermal Performance （更好的散热表现） 或 Full Speed(风扇全速) 默认是安静模式 调过之后表现还行，待机平均40～50度，最高70～80度，不至于损坏不过作为一个善良的人还是觉得有点过意不去，准备抽空换个散热 各种坑如果你还没入坑，那太好了，一起来看看会遇到什么问题 一句话 推荐 i3 4330t最好是T/S后缀或者i3不带后缀也行核心显卡要保证是英特尔® 核芯显卡 4600TDP不要超过60W，不然你就可以用电脑烤肉了:P CPU最好是低电压低功耗的，也就是所谓T后缀或S后缀的。标压的也不是不能用，只不过待机温度偏高。i3 4330在静音模式下高达60℃。bios里选择散热优先，满载时的温度长时间倒也不至于损坏。只是需要斟酌罢了，高频率和低温度不可兼得。实测macOS对频率要求不太高，为了长久大计还是买个 i3 4330t 吧 CPU核心显卡最好是HD 4600的，听说4400有JPG预览问题，而且比较麻烦。HD 4600简单方便，原生支持，也就贵个十来块，省下好多烦心事。这就是说i3 31xx不合适 VGA省了吧，买根DisplayPort线，苹果早就抛弃vga接口了（2G网真快） 如果你的黑苹果休眠后唤醒重启，那么请看这个教程 看看这里方便买CPUIntel Core i3https://ark.intel.com/content/www/cn/zh/ark/products/series/75025/4th-generation-intel-core-i3-processors.html#@DesktopIntel Core i5https://ark.intel.com/content/www/cn/zh/ark/products/series/75024/4th-generation-intel-core-i5-processors.html#@Desktop 祝大家玩的愉快","categories":[{"name":"Hackintosh","slug":"Hackintosh","permalink":"https://hiztr.cn/categories/Hackintosh/"}],"tags":[]},{"title":"个人博客搭建指南-静态网站托管","slug":"Static-website-build-insturction","date":"2020-06-01T11:42:16.000Z","updated":"2020-06-05T11:33:30.813Z","comments":true,"path":"2020/06/01/Static-website-build-insturction/","link":"","permalink":"https://hiztr.cn/2020/06/01/Static-website-build-insturction/","excerpt":"腾讯云出了新的静态网站托管啦，我准备尝试用它来建立一个静态博客","text":"腾讯云出了新的静态网站托管啦，我准备尝试用它来建立一个静态博客 长文请配合目录食用，左下角有个⚓️图标，点击可展开目录 大好消息，腾讯云的静态网站托管上线啦 https://console.cloud.tencent.com/tcb/hosting 也就是说，现在在国内终于有了比 GitPage 更好的解决方案了。主要表现如下： 网速更快（物理上更近啊） 按理说百度可以收录了 还有免费套餐(大约每月10k访问量) 总而言之，真香 注册腾讯云账号这就…不用说了吧，顺带实名认证下方便将来买域名什么的 打开静态网站托管在产品里搜索 创建一个云开发环境一开始他会提示你新建云环境，点击 一定要选择按量计费和免费资源（不然欠费别怪我） 配置静态网站托管得先等云环境初始化好了，刷新一下，点击确定就好啦 依然是慢的要死 进来是这样的界面 配置 hexo 博客这个和之前的差不多，折叠起来放在下面 PS: 如果你已经装好了请直接跳到建立本地环境一节 安装 node.js 并配置打开官网,无脑下载。 终端执行如下命令，无输出。（切换镜像源，不然卡死你） 1npm config set registry https://registry.npm.taobao.org 安装 hexo先建好一个空的文件夹，cd 到上一层目录，执行：(注意，windows powershell 会鬼畜，cmd就好) 12npm install -g hexo-clihexo init 你的文件夹名字 启动，关闭 hexo1hexo s 打开浏览器localhost:4000就能看到了按Ctrl + c退出 安装一大堆插件123456npm install hexo-wordcount --savenpm install hexo-generator-json-content --savenpm install hexo-generator-feed --savenpm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --savenpm install hexo-deployer-git --save 安装主题如果你要用 Gitpage，记得不要用太多图片的主题，会很卡 1git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 是cofess的主题，很简洁 配置有两个文件，themes/pure/_config.yml和_config.yml，优先修改第一个 1theme: pure 重新生成一下，不然不会生效 1hexo clean &amp;&amp; hexo g 另外，还要修改诸如作者名、网址、网站名、评论插件等，各个主题皆有不同，请参考 readme 和百度一般会有注释 写文章，发表写文章12hexo new post &quot;文章名称&quot; #新建文章hexo new page &quot;页面名称&quot; #新建页面 他会输出一个地址，你打开它就可以编辑了(紫色显示) 文章格式12345678910111213---title: 标题date: 时间 xxxx-xx-xx xx:xx:xxcategories:- #分类，只有一个tags:- #标签，可有多个toc: true #是否显示目录desciption: &quot;简介，在搜索时可以看到，不要太长&quot;---文章简介，可以在主页看到&lt;!-- more --&gt;正文 友链、分类、标签页面的开启 不方便说明，百度或看 readme 发表(注意差别⚠️)12$ hexo clean &amp;&amp; hexo g$ tcb hosting:deploy public -e 你的envid #跟刚才一样 部署 cloud base安装 Tencent cli注意哈，要先装 node.js 1$ sudo npm install -g @cloudbase/cli 1$ tcb -h #应该有输出 建立本地环境首先，cd 到刚才 hexo init 的那一级目录：结构大概如此 123➜ Web Site ls_admin-config.yml config logs node_modules package-lock.json public source website_config.yml db.json null package.json scaffolds themes 登陆1➜ ~ tcb login 在弹出的窗口登陆即可 创建环境输入 1$ tcb init public 参数如下选择，回车确定 123456➜ Web Site tcb init public✔ 选择关联环境 · blog - [blog-1945c4:空]✔ 请输入项目名称 · website✔ 选择开发语言 · Node✔ 选择云开发模板 · Hello World✔ 创建项目 website 成功！ 部署1$ tcb hosting:deploy public -e 你的envid 可以这样查看 envid（就是项目名➕一堆字符） 如下结果说明部署成功 1234567➜ Web Site tcb hosting:deploy public -e blog-1945c4文件传输中 [==================================================] 100% 0.0s✔ 部署完成 👉 http://url.url # 这个就是部署好的地址✔ 文件共计 55 个✔ 文件上传成功 55 个✖ 文件上传失败 0 个 浏览器打开这个网址就能看到了 配置打开_config.yml 把url修改为你刚才访问的网址 123456789# URL## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;url: https://blog-1945c4-1255489341.tcloudbaseapp.com/root: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks 重新生成并部署 12$ hexo clean &amp;&amp; hexo g$ tcb hosting:deploy public -e 你的envid #跟刚才一样 现在页面链接应该正常了 注意事项 要选择方案为按量计费、免费额度 要修改网站根目录的 _config.yml 中的url 部署方式为12$ hexo clean &amp;&amp; hexo g$ tcb hosting:deploy public -e 你的envid #跟刚才一样 注意那个箭头啊，$符啊什么的都是终端提示符，别一股脑全粘进去了 另外，如果你想使用评论或其他的功能，请把url替换掉 还有，你们可能觉得这个域名长的难以忍受，不过不慌，会介绍自定义域名的。如果你使用hexo d的话还是可以部署到github的，只不过链接会跳转到这里 如果有问题请评论，我会看到的","categories":[{"name":"Develop","slug":"Develop","permalink":"https://hiztr.cn/categories/Develop/"}],"tags":[{"name":"Website","slug":"Website","permalink":"https://hiztr.cn/tags/Website/"}]},{"title":"个人博客搭建—使用图床","slug":"Image-hosting-tips","date":"2020-05-17T04:00:00.000Z","updated":"2020-06-05T11:29:39.669Z","comments":true,"path":"2020/05/17/Image-hosting-tips/","link":"","permalink":"https://hiztr.cn/2020/05/17/Image-hosting-tips/","excerpt":"继续填坑，来说怎么向文章里添加图片","text":"继续填坑，来说怎么向文章里添加图片 图床简介图床就是一个存储图片并向互联网提供这些图片的服务器，一般会使用 cdn 等使访问速度较快。 为什么要使用图床 服务器承担不了过大的请求数量 服务器访问缓慢 更稳定安全的存储（注意某些并不安全，会突然暴毙） 在最早的文章中，我选择了使用 Github 的免费托管。众所周知在国内 Github 访问是很慢的，所以不用图床会极大影响加载速度和用户体验。 使用方法首先，介绍下国内使用还算不错的服务商： 七牛 sm.ms imgurl 我现在再用 sm.ms 的，主要是免费还不用注册(最近上传有些慢不知为什么)。 准备好你要的图片 小技巧：截图快捷键Windows 用户: Windows+Shift+S (Windows 10) 或 PrintScreen 键mac 用户: Command+Shift+4 (区域截图) 按一下空格切换到窗口截图 注意，如果网速不好压缩一下也是个好办法。压缩网址https://tinypng.com 上传 说的很清楚：把文件拖到这里，或者复制粘贴 使用 选择 markdown，复制下来插入 markdown 源码即可。注意别粘错了 看起来像这样 1![提示语](url) 刷新一下就能用啦","categories":[{"name":"Develop","slug":"Develop","permalink":"https://hiztr.cn/categories/Develop/"}],"tags":[{"name":"Website","slug":"Website","permalink":"https://hiztr.cn/tags/Website/"}]},{"title":"个人博客搭建—使用 Gitalk","slug":"Gitalk-register-and-use","date":"2020-04-08T23:16:44.000Z","updated":"2020-06-05T11:28:52.696Z","comments":true,"path":"2020/04/09/Gitalk-register-and-use/","link":"","permalink":"https://hiztr.cn/2020/04/09/Gitalk-register-and-use/","excerpt":"上一篇说了基本的静态博客搭建，这里补充一下评论系统的使用方法。","text":"上一篇说了基本的静态博客搭建，这里补充一下评论系统的使用方法。 为什么上一篇文章说过，静态博客就只是一堆 html 页面，并没有后台，自然也不能响应动态请求。而评论需要有存储、响应请求……自然是不能实现。 然而并不是不能实现，serverless无服务器的技术可以帮我们解决这个难题。Gitalk 是一个 js 插件，能使用Github账号来登陆，并将用户的评论转为 issue 存到仓库里。又剩下了一笔资金是不是。更方便的是它不需要备案就可以直接使用。 怎么做首先你得有个 Github 账号（都用 Gitpage 了怎么就没有 GitHub 账号）其次你的主题最好支持配置 Gitalk，就省的写代码了。类似如下这样 123456gitalk: # gitalk. https://gitalk.github.io/ owner: HelloWorldZTR #必须. GitHub repository 所有者，可以是个人或者组织。 admin: HelloWorldZTR #必须. GitHub repository 的所有者和合作者 (对这个 repository 有写权限的用户)。 repo: HelloWorldZTR.github.io #必须. GitHub repository. ClientID: #必须. GitHub Application Client ID. ClientSecret: #必须. GitHub Application Client Secret. 注册 OAuth 应用你的头像- Settings 点击 Developer Settings （最下） 选择 OAuth Apps 并新建一个 OAuth App 填写表格 Application name: 应用名，用户在使用 Github 账号登陆时可以看到。要可信，明确用途，我是博客评论就写blog comment Homepage URL: 博客网址，没得说 description可以写，也可以不写 Callback URL：登陆后跳转到的 URL 和博客地址相同即可 添加评论复制他给你的两个 ID 填写到你的配置文件里（themes/xxx/_config.yml） 123456gitalk: # gitalk. https://gitalk.github.io/ owner: HelloWorldZTR #必须. GitHub repository 所有者，可以是个人或者组织。 admin: HelloWorldZTR #必须. GitHub repository 的所有者和合作者 (对这个 repository 有写权限的用户)。 repo: HelloWorldZTR.github.io #必须. GitHub repository. ClientID: xxxxxxxxxxxx #必须. GitHub Application Client ID. ClientSecret: xxxxxxxxxxxxxx #必须. GitHub Application Client Secret. 重启一下服务器 应该能看到这样的东西 （登陆可能有点慢，刷新一下就不会显示 Network Error 了） 发一条评论，应该可以看见 issue 了","categories":[{"name":"Develop","slug":"Develop","permalink":"https://hiztr.cn/categories/Develop/"}],"tags":[{"name":"Website","slug":"Website","permalink":"https://hiztr.cn/tags/Website/"}]},{"title":"个人博客搭建指南","slug":"WebSite-Build-instruction","date":"2020-04-08T08:29:02.000Z","updated":"2020-06-05T11:33:53.759Z","comments":true,"path":"2020/04/08/WebSite-Build-instruction/","link":"","permalink":"https://hiztr.cn/2020/04/08/WebSite-Build-instruction/","excerpt":"让我们来聊一聊关于搭建静态个人博客的一些小事","text":"让我们来聊一聊关于搭建静态个人博客的一些小事 建站指南 我写的一系列指南，让你能快速建立一个和这个网站一样简洁有用的个人博客站点 ⚠️！！如果你想建一个更便捷有用的网站，建议查看静态网站部署的那一篇 长文请配合目录食用，左下角有个⚓️图标，点击可展开目录 原因这个纯粹是说给自己看的，相信大家既然有搭建自己博客的想法，肯定就知道为什么了。首先，大多数博客网站像CSDN、博客园啥的限制很多，个性化很少，像新浪博客直接就 pass掉。其次，纯粹是一种程序员的热情，谁都不想让自己的心血白白浪费，自然需要一个 decent 的地方来挥洒自己的热情。最后，不论谁都会有很多事情想记录和分享出来。综上，搭建一个个人博客原因很充足了吧？幸运的事我们不需要花很多时间或精力，大约需要 100 元/年 的开销和 1 小时左右的时间。(如果你不要域名甚至可以不花钱) 分类纯当科普，大佬请跳过。这类网站有两种，静态和动态。静态就是不需要服务器的形式，直接渲染成 html，交互操作（评论，访问量）就全靠 js(javascript)了。最出名的有hexo、Jekyll、Hugo之类的。通常不需要多少服务器开销，功能基本够用。再是动态，不得不说的就是wordpress,这种网站就要用真正的服务器了，要有数据库、webserver……就是那些php,jsp,asp写的网站。当然就得为服务器出把血了（参考价1000元/年），好处就是有酷炫功能（登陆、论坛什么的） 服务器我们这里不说真正的服务器，只搞静态的网站（穷就完事了）跟随大众，选（白嫖） GitPage 没错。 GitPage优点：完全免费、老牌稳定缺点：国内访问慢、百度不收录 解决方法我的博客就在 Github 上，你需要： 注册一个 GitHub 账号 创建一个仓库，名叫你的账号.github.io，往里面上传一个index.html 访问https://你的账号.github.io就能看到你的 index.html 了 访问慢、百度不收录：随便办一个 CDN（内容分发网络）（10 元/年），后面详述。 CodingPage被腾讯收购后成了静态网站托管，看似要收费实际不会收费。有空我去试试。https://cloud.tencent.com/product/wh OBS 对象存储如果你都不想用，可以办一个对象存储服务(本质上原理相同)，总而言之可行而不好用。 博客本体最重要的部分，即hexo、Jekyll、Hugo之类的，下面详细记述 hexo 的安装过程。 前提条件 注册一个 GitHub 账号 创建一个仓库，名叫你的账号.github.io 安装 node.js 并配置打开官网,无脑下载。 终端执行如下命令，无输出。（切换镜像源，不然卡死你） 1npm config set registry https://registry.npm.taobao.org 安装 git打开官网，无脑下载（linux,mac不用下载，系统自带） 安装一路 Yes 安装 hexo先建好一个空的文件夹，cd 到上一层目录，执行：(注意，windows powershell 会鬼畜，cmd就好) 12npm install -g hexo-clihexo init 你的文件夹名字 启动，关闭 hexo1hexo s 打开浏览器localhost:4000就能看到了按Ctrl + c退出 安装一大堆插件123456npm install hexo-wordcount --savenpm install hexo-generator-json-content --savenpm install hexo-generator-feed --savenpm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --savenpm install hexo-deployer-git --save 安装主题如果你要用 Gitpage，记得不要用太多图片的主题，会很卡 1git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 是cofess的主题，很简洁 配置有两个文件，themes/pure/_config.yml和_config.yml，优先修改第一个 在_config.yml文末，修改如下(repo一行自己修改为仓库的ssh)，这样他会直接提交到你的仓库里。 1234deploy:type: gitrepo: git@github.com:HelloWorldZTR/HelloWorldZTR.github.io.gitbranch: master 顺便改个主题 1theme: pure 重新生成一下，不然不会生效 1hexo clean &amp;&amp; hexo g 另外，还要修改诸如作者名、网址、网站名、评论插件等，各个主题皆有不同，请参考 readme 和百度 配置ssh借用一下思否的图生成ssh公钥 123456git config --global user.name &quot;用户名&quot;git config --global user.email &quot;邮箱地址&quot;ssh-keygen -t rsa -C &#x27;上面的邮箱&#x27;# 三次回车 =&gt; 密码为空cat ~/.ssh/id_rsa.pub 把刚才的cat输出拷贝粘贴到框里 写文章，发表写文章12hexo new post &quot;文章名称&quot; #新建文章hexo new page &quot;页面名称&quot; #新建页面 他会输出一个地址，你打开它就可以编辑了(紫色显示) 文章格式12345678910111213---title: 标题date: 时间 xxxx-xx-xx xx:xx:xxcategories:- #分类，只有一个tags:- #标签，可有多个toc: true #是否显示目录desciption: &quot;简介，在搜索时可以看到，不要太长&quot;---文章简介，可以在主页看到&lt;!-- more --&gt;正文 友链、分类、标签页面的开启 不方便说明，百度或看 readme 发表12hexo clean &amp;&amp; hexo g # 重新生成hexo d # 发布到 Github 域名有名网址，不想输xxx.github.io，还想再个性化点？花钱买个域名就好啦。 不想用分配的域名，自己去 狗爹网 或国内平台办理即可。不同域名价格差很大，记得货比三家～ 然后在 DNSpod 中配一下即可，如果有CDN要关联。具体做法可以百度，我马上就去填坑 CDN如果你想用 Gitpage 的话，这点钱花的有必要。具体做法不多说，记得是 CDN 内容分发网络，套餐选 按需计费 即可，每年 50G 对博客站完全足够。大家可以货比三家，好好算算价钱。 我会详细介绍域名和 CDN 的使用方法。 其他事项你需要去搜索引擎提交你的网站，不然没有流量 评论系统见这里https://helloworldztr.github.io/2020/04/09/Gitalk-register-and-use/","categories":[{"name":"Develop","slug":"Develop","permalink":"https://hiztr.cn/categories/Develop/"}],"tags":[{"name":"Website","slug":"Website","permalink":"https://hiztr.cn/tags/Website/"}]},{"title":"黑苹果 ATI HD 显卡通用驱动方式及 HD 5450 的驱动","slug":"Hackintosh-ATI-Driver","date":"2020-03-10T09:37:32.000Z","updated":"2020-05-26T05:21:53.765Z","comments":true,"path":"2020/03/10/Hackintosh-ATI-Driver/","link":"","permalink":"https://hiztr.cn/2020/03/10/Hackintosh-ATI-Driver/","excerpt":"这篇文章将不采用任何付费的 kexts，用苹果的原生机制驱动我们的显卡。","text":"这篇文章将不采用任何付费的 kexts，用苹果的原生机制驱动我们的显卡。 前言 非常感谢这位博主的博客不仅启发了我，而且解决了我的问题转载http://blog.csdn.net/wr132/article/details/54837303我个人的显卡是HD 5450。这篇文章将不采用任何付费的 kexts，用苹果的原生机制驱动我们的显卡。现在我整理了相关资料，希望能帮助大家 注意，你需要使用 ATI HD 显卡， CLover 引导 另外，这里只写了 HD 5xxx/6xxx 的相关信息，若果是其他的显卡可能需要爬帖找找资料，但是希望这篇文章可以启发一下 :D还有，如果你在用 HD 5xxx/6xxx 显卡装 Mojave 或 Catalina ，请老老实实换回 High Sierra，或者扔了显卡，去深水宝淘一个黑苹果免驱卡（这些显卡不支持新 Metal，根本就不能用，从 HD 7xxx 才支持） 显卡不正常驱动的表现在黑苹果过程中，驱动显卡可谓最重要的一步了，因为没有驱动，你的电脑会成这样： 5M 的显存 (虽然跟我的 512M 差不多) 显卡型号不能显示 1280x720 的白内障分辨率 卡成 xxx 的启动器 没有透明等炫酷特效 撕裂严重 如果你上面的问题都没有遇到，那么就恭喜你已经驱动好显卡了，或者苹果本身就支持你这张显卡。这也引出了我们操作的原理。 操作原理及具体操作这里我们将通过 Clover 注入显卡虚假 ID ，让系统认为安装的显卡是原生支持的，从而驱动。这里只列出了 ATI 显卡，不过其他的 A卡或许也可以通过这种方法驱动。 我将把 ID 表放在文末 挂载 EFI 分区这里需要用到 Clover 做引导，并下载安装 Clover Configurator 打开 Clover Configurator，选择挂载分区。 挂载你启动用的 EFI 分区，输入密码。 打开配置文件点击最左下角的图标，导入你的 config.plist (下面开始可能会有风险，推荐全部看完后再决定尝试) 修改 fake ID按 command + 空格呼出菜单,打开System Information.app选择图形卡/显示器，里面有设备 ID，记下来我这里的显卡 ID 是0x68e0 (设备 ID 和虚假 ID 一样，因为我已经注入成功了，但是本来不是这样的，本来是0x68E1)在文末的支持对照表内找到型号、ID 相似的显卡，复制下来表中的ID我在这里找到的虚假 ID 是0x68E01002 (5470m,虽然是移动显卡但可以正常驱动)非常巧，5470m配合我的i5-2400刚好组合成了imac mid2011的配置（imac12,2），顺带也可以把smbios注入进去。 注入显卡在 Clover Configurator 中选择设备设置栏，在仿冒 ID 里 ATI 中写上虚假 ID 再转到显卡设置栏，钩上注入ATI/AMD 显卡选项，在 FB名称中选择你那个系列的名称。 这里有点问题，具体选哪个 FB 取决于你显卡的接口类型，本来应该按照那位博主的博客是该选 Eulemur 的，但最后还选了 Baboon这里可以使用AMD Framebuffer Utility来选择 FB，但事实证明瞎猜也是可行的方法（但是等你看完了再去猜）。 点击最左下角的保存文件按钮 调试我按照那位博主的方法，成功驱动了显卡，但当我一重启，居然黑屏了。我发现系统正常启动，但是显卡没有输出。经过一番查询、翻贴，发现是 FB 的问题。如果你也出现了黑屏，请先别着急放弃： 在启动之前选择 Option打开Graphics Injector再把 Inject ATI 的钩去掉，就可以正常启动了，然后再重复以上步骤，修改 FB或者，你可以直接在 CLover 中 FB config 输入FB 名。 最后说一句，黑苹果要的是耐心，当然你可以不挨个尝试 FB 名称，而直接注入 FB， 但是由于 AMD Framebuffer Utility 貌似找不到，所以这种方法反倒是节省了时间。一句话，干他就完事了。 截图为证 后话这里说说我为什么不能使用那个博主的 FB 驱动 HD 5450因为我的显卡是 DDVI 接口的，可以分出两个 VGA所以 FB 是Baboon（据推测）如果大家的也是dell 的 OEM 卡，也是 DDVI 的，直接照着这个做就行。若不是，可能就得花时间挨个尝试了。最后祝大家早日吃上黑苹果:P ID 列表这里列出的是来自百度问答的 ID 表，也存起来防吞。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677ATI5系列全部ID0x68981002 58700x68991002 58500x68E01002 5470m 6370m为68E4//8.22更新0x68E11002 5430/5450/5430m0x68D81002 56700x68C01002 5730m 6570m0x68C11002 5650m 6550m0x68D91002 56300x68B81002 57700x68B01002 5870m ?0x68B11002 未找到 很有可能是5700Series或5800m Series0x68A01002 5870m0x68A11002 5800m SeriesATI6系列全部ID0x67681002 CAICOS GL PRO(专业卡)0x67701002 6400 series0x67791002 64500x67601002 6470m0x67611002 6430m0x67501002 65700x67581002 66700x67591002 65700x67401002 6730m0x67411002 6650m 6625m/7610m0x67451002 未找到 很有可能是6600m/6700m Series或6600Series0x67381002 68700x67391002 68500x67201002 6990m0x67221002 BARTS GL2 (专业卡)0x67181002 69700x67191002 69500x68401002 7670m0x68411002 7500m/7600m series0x67041002 CAYMAN GL PRO (专业卡)AMD加速剂驱动AMDBartsGraphicsAccelerator0x67381002 68700x67391002 6850 6790可替换这个ID0x67201002 6900m0x67221002 BARTS GL2 (专业卡)AMDCaicosGraphicsAccelerator0x67681002 CAICOS GL PRO(专业卡)0x67701002 6400 series0x67791002 64500x67601002 6470m0x67611002 6430mAMDCaymanGraphicsAccelerator0x67181002 69700x67191002 69500x67041002 CAYMAN GL PRO (专业卡)AMDCedarGraphicsAccelerator0x68E01002 5470m 5450/6370等卡替换这个IDAMDCypressGraphicsAccelerator0x68981002 58700x68991002 5850AMDJuniperGraphicsAccelerator0x68B01002 5800m Series0x68B11002 未找到很有可能是5700Series或5800m Series0x68A01002 5870m0x68A11002 5800m Series0x68B81002 5770 5750/6770/6750可在这替换IDAMDLombokGraphicsAccelerator0x68401002 6700m series0x68411002 6600m seriesAMDRedwoodGraphicsAccelerator0x68D81002 56700x68C01002 5730m 6570m0x68C11002 5650m 6550m0x68D91002 5630AMDTurksGraphicsAccelerator0x67501002 65700x67581002 66700x67591002 65700x67401002 6700m series0x67411002 6600m series0x67451002 未找到 很有可能是6600m/6700m Series或6600Series 我们要通过操作，注入以下支持显卡的 ID：(不一定百分百准确，笔记本显卡不一定真的支持) HD 台式机原生显卡 | HD 笔记本原生显卡(m) 名称 ID 名称 ID 5630 0x68D91002 5430m 0x68E11002 5670 0x68D81002 5470m 0x68E01002 5770 0x68B81002 5650m 0x68C11002 5850 0x68991002 5730m 0x68C01002 5870 0x68981002 5800m series 0x68A11002 6450 0x67791002 6470m 0x67601002 6570 0x67501002 6600m series 0x68411002 6670 0x67581002 6700m series 0x68401002 6850 0x67391002 6900m 0x67201002 6870 0x67381002 7500m/7600m 0x68411002 123456789移动版原生支持的有：5系列:5430m、5470m、5650m、5730m、5800m 系列（除了5870m之外，其他5800m系列的具体ID我并没有查到，如果知道的话请补充）6系列: 6470m、6600m series、6700m series、6900m、7500m/7600m series（具体型号我查不到，希望知道的童鞋补充）而6550m和6570m完全是5650m和5730m的马甲卡，ID都是一样的，对系统来说完全没有区别。笔记本原生支持不等于免驱，继续往下看吧。台式机的话：桌面卡可以原生支持的有5630 5670 5770 5850 58706450 6570 6670 6850 6870","categories":[{"name":"Hackintosh","slug":"Hackintosh","permalink":"https://hiztr.cn/categories/Hackintosh/"}],"tags":[]},{"title":"Logistic Regression 的通俗解释","slug":"Simple-explain-to-logistic-regrssion","date":"2020-03-05T01:23:52.000Z","updated":"2020-05-26T05:21:16.281Z","comments":true,"path":"2020/03/05/Simple-explain-to-logistic-regrssion/","link":"","permalink":"https://hiztr.cn/2020/03/05/Simple-explain-to-logistic-regrssion/","excerpt":"最近开始学习机器学习，了解了Logistic Regression 的原理。我个人认为，Logistic Regression 是机器学习最基础的模型，它诠释了机器学习的基本原理。","text":"最近开始学习机器学习，了解了Logistic Regression 的原理。我个人认为，Logistic Regression 是机器学习最基础的模型，它诠释了机器学习的基本原理。 Logistic Regression (Logistic 回归) 的通俗解释最近开始学习机器学习（怎么感觉这句话怪怪的），了解了Logistic Regression 的原理。我个人认为，Logistic Regression 是机器学习最基础的模型，它诠释了机器学习的基本原理 先来一张经典的图 Logistic Regression 的目的我们先忘了上面那张图，来看一张干净简单一点的：（纯手画有点丑） 这个过程很简单，便是根据已有的参数给出一个答案 我们先来看一下这里面的参数： x1 和 x2 ：输入的参数 w1 和 w2 ：权重（先不用管） b ：biase（也不用管） 我们再来更形象地描述一下： 比方说你有一个房子，有两个属性：房屋面积 x1 ，卧室数量 x2 （大佬给出的例子）你现在要通过上图的方法，给出你对这个房子的判断：这是不是个好房子 虽然这个例子主观性过强，但我们假设只要 x1 x2 一定，这个房子就是好房子 总结一下：输入 x1 x2输出 一个判断 y Forward Propagation 正向传播我们现在讨论的东西，是关于如何给出判断的，图中已经给出了，相信很容易看懂。 我再写一遍：z = w1*x1 + w2*x2 + by = σ(z) 但他们都是什么意思呢？ x1 x2 我们已经知道了，但是w1 w2表示了什么呢？学过OI的可能知道w是Weight的缩写，译为权重。你可以想象，如果房屋面积 x1 对我很重要，那我就让 x1 乘上一个很大很大的数 w1，那么它就会对最终的值产生更大的影响 哪b呢？b是biase的缩写，译作偏差。很容易理解，如果你的预测总是差了0.00001，那么加上个0.00001不久一劳永逸了么 总结一下：w ： 控制对应 x 对结果的影响b ： 微调结果 σ(z)是啥呢？ 来张sigmoid函数的靓照 有点感觉了没有？它把 y 的值切成了两部分 0 ~ 0.5 和 0.5 ~ 1, 分别对应着 z 中 &lt;0 和&gt;0 的范围。所以σ(z)的作用：把 z 的值转换为判断 σ(z)&gt;0.5 时 判断为真（当然假也行）σ(z)&lt;0.5 时 判断为假（同上） Backward Propagation 反向传播刚才我们解释了怎么用正确的 w 和 b 来判断，但是它们是怎么来的？……靠蒙的你信吗…… 一开始，我们的 w 和 b 都取的是随机数，当然不能给出完全正确的答案。所以呢，我们需要微调 w 和 b ，让最终结果向真正的 y 靠拢。（注意这个图中 y 成了 a ，因为不是最终答案） 下面将是本文中最吓人的部分请洗把脸再看（实际上你不需要过多的了解） 我们既然要让结果向真正的 y 靠拢，就需要一个函数来判断它的偏差，这里就轮到 Loss 函数登场了。（图中最后一个方框的 L ）由于方法众多，公式冗长，你可以将它看作方差(y-a)^2 知道了目标，具体的靠拢方法就要请到梯度下降法了（当然还有更多[转载自博客]） 是不是挺像下山？我们的目标是 Loss 最小（J 函数是全局的 Loss），求出最小，即使是局部最小，也对我们有极大帮助。 等一下，我们是不是只求出了 Loss 最小，但是 w 和 b 还不知道呢。这时候就需要导数了。当然我们可以不知道，我觉得就是一个神奇的规律，建立在 Loss 和 w 、b 之间。这样，运用那种我们不太熟悉的神奇规律，就能优化 w 和 b 的值了。这就是机器学习最重要的一步 Optimize （优化）。 现在，我们已经万事俱备，只欠东风了。现在机器已经知道了学习方法，就是时候给它灌教辅资料了。 Training 训练这里不必多说，机器学习总是建立在大数据之上的，没有大数据的支持，机器学习的存在就没有意义。现在假设我们拥有很多很多组房屋的数据 x1, x2，和你对它们的看法 y={0, 1}。你便可以将它们灌给机器，执行一次正向传播，得出偏差之后，再进行一次反向传播，优化 w 和 b。 Test 测试当你把它们都灌给机器后，你已经得到了近似完美的 w 和 b，现在，你只要输入未知的的 x，你就能得到近似正确的 y。 好啦，写到这里差不多就这样了，原理从中可以看出，但具体的推导和向量化优化以及跟优化的激活函数，还需要进一步的学习。 如果你觉得我文中有不妥或错误，欢迎跟我交流 图形上的意义 如图，圈点代表着好房子，叉点代表着不好的房子 我们求出的，实际是好房子与不好房子的分界线（蓝线） 我们这里解决的是一个二分分类的问题，实际上也是机器学习最基础的也是最早的问题。当然也比较有意思。","categories":[{"name":"Other","slug":"Other","permalink":"https://hiztr.cn/categories/Other/"}],"tags":[]},{"title":"Spring Boot 注入静态变量","slug":"Static-Inject-in-Springboot","date":"2020-03-04T13:00:30.000Z","updated":"2020-05-19T09:04:52.965Z","comments":true,"path":"2020/03/04/Static-Inject-in-Springboot/","link":"","permalink":"https://hiztr.cn/2020/03/04/Static-Inject-in-Springboot/","excerpt":"你承受过NullPointerException的痛苦吗？Spring Boot的静态变量注入使我体会到了生命的意义（手动滑稽）","text":"你承受过NullPointerException的痛苦吗？Spring Boot的静态变量注入使我体会到了生命的意义（手动滑稽） 如果你曾经试过如下的一段代码 12@Value(&quot;$&#123;database.driver&#125;&quot;)private static String driver; 如果程序鲁棒性不好，你便会得到一个NullPointerException反正是不能达到你想要的目的，给静态变量赋值。 解决方案 用一个非静态的变量当中介，像这样 1234@Value(&quot;$&#123;database.driver&#125;&quot;)private String _driver;private static String driver; 然后在构造函数中将_driver赋给driver即可 写一个non-static的set方法，像酱紫 1234567public class BaseDao&#123; private static String driver; @Autowired public void setDriver(@Value(&quot;$&#123;database.driver&#125;&quot;) String driver) &#123; BaseDao.driver = driver; &#125; &#125; 注意事项 set方法一定是non-static的 一定要小心加载顺序，static代码块不要随便写，不然又是NullPointerException","categories":[{"name":"Develop","slug":"Develop","permalink":"https://hiztr.cn/categories/Develop/"}],"tags":[{"name":"java","slug":"java","permalink":"https://hiztr.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://hiztr.cn/tags/springboot/"}]},{"title":"Java仿制GUI系统控制台","slug":"Make_a_gui_in_java","date":"2020-03-04T13:00:00.000Z","updated":"2020-06-05T11:30:25.933Z","comments":true,"path":"2020/03/04/Make_a_gui_in_java/","link":"","permalink":"https://hiztr.cn/2020/03/04/Make_a_gui_in_java/","excerpt":"在使用Java编程的时候，你可能会厌倦那个黑色的框框控制台，然而，在你使用GUI时，有些时候又会怀念那个框框。我现在便遇到了这样的一个情况，需要仿制一个系统控制台来显示系统输出(System.out和System.err)，分开显示。","text":"在使用Java编程的时候，你可能会厌倦那个黑色的框框控制台，然而，在你使用GUI时，有些时候又会怀念那个框框。我现在便遇到了这样的一个情况，需要仿制一个系统控制台来显示系统输出(System.out和System.err)，分开显示。 用PrintStream仿制GUI系统控制台 不要试图在大型应用内使用PrintStream，因为他永远不会抛出IOException，调试用用算了 在使用Java编程的时候，你可能会厌倦那个黑色的框框控制台，然而，在你使用GUI时，有些时候又会怀念那个框框。我遇到了这样的一个情况，便是需要仿制一个系统控制台来显示系统输出(System.out和System.err)，分开显示。之所以说是仿制，因为只能输出不能输入（而且很丑）。主要思路是用两个PrintStream（重写了write函数）来替代System.out和System.err 代码Main.java主程序，将输出重定向 12345678910111213141516171819202122package com.ztr;import com.ztr.frames.ConsoleFrame;import java.io.PrintStream;public class Main&#123; public static void main(String[] args) throws Exception &#123; PrintStream sysOut = System.out; PrintStream sysErr = System.err; /*获取控制台输出*/ ConsoleFrame.init(); System.setOut(ConsoleFrame.getSysOutps()); System.setErr(ConsoleFrame.getSysErrps()); ConsoleFrmae.setVisible(true) /*这里往下的输出都会被重定向到ConsoleFrame的texrarea*/ System.out.println(&quot;blablabla&quot;); /*恢复原始输出！！,小心被坑*/ System.setOut(sysOut); System.setErr(sysErr); &#125;&#125; ConsoleFrame.java一个静态的类，用来显示仿制的Console,在其中重写了PrintStream 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172package com.ztr.frames;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.WindowEvent;import java.awt.event.WindowListener;import java.io.IOException;import java.io.PrintStream;public class ConsoleFrame &#123; private static Frame f; private static Panel out, err; private static TextArea console, consoleErr; private static PrintStream SysOutps = null, SysErrps = null; public static void init() &#123; f = new Frame(&quot;System Console&quot;); CardLayout layout = new CardLayout(); f.setLayout(layout); out = new Panel(); out.setLayout(new GridLayout(2, 1)); console = new TextArea(); console.setColumns(100); console.setRows(50); consoleErr = new TextArea(); consoleErr.setColumns(100); consoleErr.setRows(50); consoleErr.setBackground(Color.pink); /*重写方法，把输出重定向，即append到对应的textarea上*/ SysOutps = new PrintStream(System.out) &#123; @Override public void write(int b) &#123; console.append(String.valueOf(b)); &#125; @Override public void write(byte[] buf, int off, int len) &#123; console.append(new String(buf, off, len)); &#125; &#125;; SysErrps = new PrintStream(System.out) &#123; @Override public void write(int b) &#123; consoleErr.append(String.valueOf(b)); &#125; @Override public void write(byte[] buf, int off, int len) &#123; consoleErr.append(new String(buf, off, len)); &#125; &#125;; out.add(console); out.add(consoleErr); f.add(out); f.pack(); f.addWindowListener(new WindowListener() &#123; @Override public void windowClosing(WindowEvent e) &#123; System.exit(0); &#125; &#125;); &#125; public static PrintStream getSysOutps() &#123; return SysOutps; &#125; public static PrintStream getSysErrps() &#123; return SysErrps; &#125; public static void setVisible(boolean vis) &#123; f.setVisible(vis);; &#125;&#125; 效果大概就是个很丑的框框（本来就是），我也懒得写，就用awt凑数了用SpringBoot的输出 几句话 不要试图在大型应用内使用PrintStream，因为他永远不会抛出IOException，调试用用算了 在用完PrintStream后一定要恢复原始输出，除非你知道关闭后会不会还有输出 PrintStream的核心是write函数，重写这个就够了（除非你有信心全部重写）","categories":[{"name":"Develop","slug":"Develop","permalink":"https://hiztr.cn/categories/Develop/"}],"tags":[{"name":"java","slug":"java","permalink":"https://hiztr.cn/tags/java/"}]},{"title":"修改 IDEA 自带的 maven 源","slug":"Change-Maven-in-Idea","date":"2020-03-03T16:00:00.000Z","updated":"2020-05-19T09:04:28.907Z","comments":true,"path":"2020/03/04/Change-Maven-in-Idea/","link":"","permalink":"https://hiztr.cn/2020/03/04/Change-Maven-in-Idea/","excerpt":"作死用过idea自带maven的都知道，在国内真的贼慢。就导入几个依赖就得花上大半个小时。于是我一番百度，果断更改了maven镜像源。现在记录下来以免再次踩坑。","text":"作死用过idea自带maven的都知道，在国内真的贼慢。就导入几个依赖就得花上大半个小时。于是我一番百度，果断更改了maven镜像源。现在记录下来以免再次踩坑。 如何提高idea自带maven的更新速度作死用过idea自带maven的都知道，在国内真的贼慢。就导入几个依赖就得花上大半个小时。于是我一番百度，果断更改了maven镜像源。现在记录下来以免再次踩坑。 过程 打开File - Settings 在搜索框内输入maven 打开如图所示的地址 修改， 加入如下代码 123456789101112131415161718192021222324252627&lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;uk&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://uk.maven.org/maven2/&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;CN&lt;/id&gt; &lt;name&gt;OSChina Central&lt;/name&gt; &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;internal nexus repository&lt;/name&gt; &lt;!-- &lt;url&gt;http://192.168.1.100:8081/nexus/content/groups/public/&lt;/url&gt;--&gt; &lt;url&gt;http://repo.maven.apache.org/maven2&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt;&lt;/mirrors&gt; 如图 重启一下idea，试试效果","categories":[{"name":"Develop","slug":"Develop","permalink":"https://hiztr.cn/categories/Develop/"}],"tags":[{"name":"java","slug":"java","permalink":"https://hiztr.cn/tags/java/"}]}],"categories":[{"name":"Hackintosh","slug":"Hackintosh","permalink":"https://hiztr.cn/categories/Hackintosh/"},{"name":"Other","slug":"Other","permalink":"https://hiztr.cn/categories/Other/"},{"name":"Develop","slug":"Develop","permalink":"https://hiztr.cn/categories/Develop/"}],"tags":[{"name":"loafing","slug":"loafing","permalink":"https://hiztr.cn/tags/loafing/"},{"name":"Website","slug":"Website","permalink":"https://hiztr.cn/tags/Website/"},{"name":"java","slug":"java","permalink":"https://hiztr.cn/tags/java/"},{"name":"springboot","slug":"springboot","permalink":"https://hiztr.cn/tags/springboot/"}]}